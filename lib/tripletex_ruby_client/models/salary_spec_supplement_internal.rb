=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class SalarySpecSupplementInternal
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :salary_specification

    attr_accessor :country

    attr_accessor :tax_country

    attr_accessor :car_number_of_km

    attr_accessor :car_number_of_km_to_home_or_work

    attr_accessor :car_list_price

    attr_accessor :car_registration_number

    attr_accessor :number_of_journeys

    attr_accessor :upgrossing_basis

    attr_accessor :upgrossing_table_number

    attr_accessor :year_of_income

    attr_accessor :deducted_artist_tax

    attr_accessor :tax_paid_abroad

    attr_accessor :continental_shaft

    # start date, currently only for Norwegian Continental Shaft
    attr_accessor :start_date

    # end date, currently only for Norwegian Continental Shaft
    attr_accessor :end_date

    attr_accessor :number_of_days

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'salary_specification' => :'salarySpecification',
        :'country' => :'country',
        :'tax_country' => :'taxCountry',
        :'car_number_of_km' => :'carNumberOfKm',
        :'car_number_of_km_to_home_or_work' => :'carNumberOfKmToHomeOrWork',
        :'car_list_price' => :'carListPrice',
        :'car_registration_number' => :'carRegistrationNumber',
        :'number_of_journeys' => :'numberOfJourneys',
        :'upgrossing_basis' => :'upgrossingBasis',
        :'upgrossing_table_number' => :'upgrossingTableNumber',
        :'year_of_income' => :'yearOfIncome',
        :'deducted_artist_tax' => :'deductedArtistTax',
        :'tax_paid_abroad' => :'taxPaidAbroad',
        :'continental_shaft' => :'continentalShaft',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'number_of_days' => :'numberOfDays'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'salary_specification' => :'SalarySpecification',
        :'country' => :'Country',
        :'tax_country' => :'Country',
        :'car_number_of_km' => :'Float',
        :'car_number_of_km_to_home_or_work' => :'Float',
        :'car_list_price' => :'Float',
        :'car_registration_number' => :'String',
        :'number_of_journeys' => :'Integer',
        :'upgrossing_basis' => :'Float',
        :'upgrossing_table_number' => :'Integer',
        :'year_of_income' => :'Integer',
        :'deducted_artist_tax' => :'Integer',
        :'tax_paid_abroad' => :'Float',
        :'continental_shaft' => :'BOOLEAN',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'number_of_days' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'salarySpecification')
        self.salary_specification = attributes[:'salarySpecification']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'taxCountry')
        self.tax_country = attributes[:'taxCountry']
      end

      if attributes.has_key?(:'carNumberOfKm')
        self.car_number_of_km = attributes[:'carNumberOfKm']
      end

      if attributes.has_key?(:'carNumberOfKmToHomeOrWork')
        self.car_number_of_km_to_home_or_work = attributes[:'carNumberOfKmToHomeOrWork']
      end

      if attributes.has_key?(:'carListPrice')
        self.car_list_price = attributes[:'carListPrice']
      end

      if attributes.has_key?(:'carRegistrationNumber')
        self.car_registration_number = attributes[:'carRegistrationNumber']
      end

      if attributes.has_key?(:'numberOfJourneys')
        self.number_of_journeys = attributes[:'numberOfJourneys']
      end

      if attributes.has_key?(:'upgrossingBasis')
        self.upgrossing_basis = attributes[:'upgrossingBasis']
      end

      if attributes.has_key?(:'upgrossingTableNumber')
        self.upgrossing_table_number = attributes[:'upgrossingTableNumber']
      end

      if attributes.has_key?(:'yearOfIncome')
        self.year_of_income = attributes[:'yearOfIncome']
      end

      if attributes.has_key?(:'deductedArtistTax')
        self.deducted_artist_tax = attributes[:'deductedArtistTax']
      end

      if attributes.has_key?(:'taxPaidAbroad')
        self.tax_paid_abroad = attributes[:'taxPaidAbroad']
      end

      if attributes.has_key?(:'continentalShaft')
        self.continental_shaft = attributes[:'continentalShaft']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'numberOfDays')
        self.number_of_days = attributes[:'numberOfDays']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@car_registration_number.nil? && @car_registration_number.to_s.length > 20
        invalid_properties.push('invalid value for "car_registration_number", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@car_registration_number.nil? && @car_registration_number.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] car_registration_number Value to be assigned
    def car_registration_number=(car_registration_number)
      if !car_registration_number.nil? && car_registration_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "car_registration_number", the character length must be smaller than or equal to 20.'
      end

      @car_registration_number = car_registration_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          salary_specification == o.salary_specification &&
          country == o.country &&
          tax_country == o.tax_country &&
          car_number_of_km == o.car_number_of_km &&
          car_number_of_km_to_home_or_work == o.car_number_of_km_to_home_or_work &&
          car_list_price == o.car_list_price &&
          car_registration_number == o.car_registration_number &&
          number_of_journeys == o.number_of_journeys &&
          upgrossing_basis == o.upgrossing_basis &&
          upgrossing_table_number == o.upgrossing_table_number &&
          year_of_income == o.year_of_income &&
          deducted_artist_tax == o.deducted_artist_tax &&
          tax_paid_abroad == o.tax_paid_abroad &&
          continental_shaft == o.continental_shaft &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          number_of_days == o.number_of_days
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, salary_specification, country, tax_country, car_number_of_km, car_number_of_km_to_home_or_work, car_list_price, car_registration_number, number_of_journeys, upgrossing_basis, upgrossing_table_number, year_of_income, deducted_artist_tax, tax_paid_abroad, continental_shaft, start_date, end_date, number_of_days].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
