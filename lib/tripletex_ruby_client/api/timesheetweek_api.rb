=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class TimesheetweekApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [ResponseWrapperWeek]
    def approve(opts = {})
      data, _status_code, _headers = approve_with_http_info(opts)
      data
    end

    # Approve week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [Array<(ResponseWrapperWeek, Fixnum, Hash)>] ResponseWrapperWeek data, response status code and response headers
    def approve_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetweekApi.approve ...'
      end
      # resource path
      local_var_path = '/timesheet/week/:approve'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'weekYear'] = opts[:'week_year'] if !opts[:'week_year'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperWeek')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetweekApi#approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Complete week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [ResponseWrapperWeek]
    def complete(opts = {})
      data, _status_code, _headers = complete_with_http_info(opts)
      data
    end

    # Complete week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [Array<(ResponseWrapperWeek, Fixnum, Hash)>] ResponseWrapperWeek data, response status code and response headers
    def complete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetweekApi.complete ...'
      end
      # resource path
      local_var_path = '/timesheet/week/:complete'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'weekYear'] = opts[:'week_year'] if !opts[:'week_year'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperWeek')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetweekApi#complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reopen week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [ResponseWrapperWeek]
    def reopen(opts = {})
      data, _status_code, _headers = reopen_with_http_info(opts)
      data
    end

    # Reopen week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [Array<(ResponseWrapperWeek, Fixnum, Hash)>] ResponseWrapperWeek data, response status code and response headers
    def reopen_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetweekApi.reopen ...'
      end
      # resource path
      local_var_path = '/timesheet/week/:reopen'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'weekYear'] = opts[:'week_year'] if !opts[:'week_year'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperWeek')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetweekApi#reopen\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find weekly status By ID, week/year combination, employeeId. or an approver
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids List of IDs
    # @option opts [String] :employee_ids List of IDs
    # @option opts [String] :week_year ISO-8601 week-year
    # @option opts [Integer] :approved_by Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseWeek]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find weekly status By ID, week/year combination, employeeId. or an approver
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ids List of IDs
    # @option opts [String] :employee_ids List of IDs
    # @option opts [String] :week_year ISO-8601 week-year
    # @option opts [Integer] :approved_by Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseWeek, Fixnum, Hash)>] ListResponseWeek data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetweekApi.search ...'
      end
      # resource path
      local_var_path = '/timesheet/week'

      # query parameters
      query_params = {}
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'employeeIds'] = opts[:'employee_ids'] if !opts[:'employee_ids'].nil?
      query_params[:'weekYear'] = opts[:'week_year'] if !opts[:'week_year'].nil?
      query_params[:'approvedBy'] = opts[:'approved_by'] if !opts[:'approved_by'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseWeek')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetweekApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unapprove week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [ResponseWrapperWeek]
    def unapprove(opts = {})
      data, _status_code, _headers = unapprove_with_http_info(opts)
      data
    end

    # Unapprove week. By ID or (ISO-8601 week and employeeId combination).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id Equals
    # @option opts [Integer] :employee_id Equals
    # @option opts [String] :week_year ISO-8601 week-year
    # @return [Array<(ResponseWrapperWeek, Fixnum, Hash)>] ResponseWrapperWeek data, response status code and response headers
    def unapprove_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TimesheetweekApi.unapprove ...'
      end
      # resource path
      local_var_path = '/timesheet/week/:unapprove'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'weekYear'] = opts[:'week_year'] if !opts[:'week_year'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperWeek')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TimesheetweekApi#unapprove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
