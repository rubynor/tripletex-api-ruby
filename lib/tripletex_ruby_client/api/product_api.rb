=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Delete product.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete product.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.delete"
      end
      # resource path
      local_var_path = '/product/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete image.
    # 
    # @param id ID of Product containing the image to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_image(id, opts = {})
      delete_image_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete image.
    # 
    # @param id ID of Product containing the image to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.delete_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.delete_image"
      end
      # resource path
      local_var_path = '/product/{id}/image'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#delete_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get product by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperProduct]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Get product by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperProduct, Fixnum, Hash)>] ResponseWrapperProduct data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.get"
      end
      # resource path
      local_var_path = '/product/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create new product.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperProduct]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # Create new product.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperProduct, Fixnum, Hash)>] ResponseWrapperProduct data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.post ...'
      end
      # resource path
      local_var_path = '/product'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Add multiple products.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Product>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [ListResponseProduct]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # [BETA] Add multiple products.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Product>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [Array<(ListResponseProduct, Fixnum, Hash)>] ListResponseProduct data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.post_list ...'
      end
      # resource path
      local_var_path = '/product/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update product.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :body Partial object describing what should be updated
    # @return [ResponseWrapperProduct]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # Update product.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Product] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperProduct, Fixnum, Hash)>] ResponseWrapperProduct data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.put"
      end
      # resource path
      local_var_path = '/product/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update a list of products.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Product>] :body JSON representing updates to object. Should have ID and version set.
    # @return [ListResponseProduct]
    def put_list(opts = {})
      data, _status_code, _headers = put_list_with_http_info(opts)
      data
    end

    # [BETA] Update a list of products.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Product>] :body JSON representing updates to object. Should have ID and version set.
    # @return [Array<(ListResponseProduct, Fixnum, Hash)>] ListResponseProduct data, response status code and response headers
    def put_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.put_list ...'
      end
      # resource path
      local_var_path = '/product/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#put_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find products corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number DEPRECATED. List of product numbers (Integer only)
    # @option opts [Array<String>] :product_number List of valid product numbers
    # @option opts [String] :name Containing
    # @option opts [String] :ean Equals
    # @option opts [BOOLEAN] :is_inactive Equals
    # @option opts [BOOLEAN] :is_stock_item Equals
    # @option opts [BOOLEAN] :is_supplier_product Equals
    # @option opts [String] :supplier_id Equals
    # @option opts [String] :currency_id Equals
    # @option opts [String] :vat_type_id Equals
    # @option opts [String] :product_unit_id Equals
    # @option opts [String] :department_id Equals
    # @option opts [String] :account_id Equals
    # @option opts [Float] :cost_excluding_vat_currency_from From and including
    # @option opts [Float] :cost_excluding_vat_currency_to To and excluding
    # @option opts [Float] :price_excluding_vat_currency_from From and including
    # @option opts [Float] :price_excluding_vat_currency_to To and excluding
    # @option opts [Float] :price_including_vat_currency_from From and including
    # @option opts [Float] :price_including_vat_currency_to To and excluding
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseProduct]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find products corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :number DEPRECATED. List of product numbers (Integer only)
    # @option opts [Array<String>] :product_number List of valid product numbers
    # @option opts [String] :name Containing
    # @option opts [String] :ean Equals
    # @option opts [BOOLEAN] :is_inactive Equals
    # @option opts [BOOLEAN] :is_stock_item Equals
    # @option opts [BOOLEAN] :is_supplier_product Equals
    # @option opts [String] :supplier_id Equals
    # @option opts [String] :currency_id Equals
    # @option opts [String] :vat_type_id Equals
    # @option opts [String] :product_unit_id Equals
    # @option opts [String] :department_id Equals
    # @option opts [String] :account_id Equals
    # @option opts [Float] :cost_excluding_vat_currency_from From and including
    # @option opts [Float] :cost_excluding_vat_currency_to To and excluding
    # @option opts [Float] :price_excluding_vat_currency_from From and including
    # @option opts [Float] :price_excluding_vat_currency_to To and excluding
    # @option opts [Float] :price_including_vat_currency_from From and including
    # @option opts [Float] :price_including_vat_currency_to To and excluding
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseProduct, Fixnum, Hash)>] ListResponseProduct data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.search ...'
      end
      # resource path
      local_var_path = '/product'

      # query parameters
      query_params = {}
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'productNumber'] = @api_client.build_collection_param(opts[:'product_number'], :multi) if !opts[:'product_number'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'ean'] = opts[:'ean'] if !opts[:'ean'].nil?
      query_params[:'isInactive'] = opts[:'is_inactive'] if !opts[:'is_inactive'].nil?
      query_params[:'isStockItem'] = opts[:'is_stock_item'] if !opts[:'is_stock_item'].nil?
      query_params[:'isSupplierProduct'] = opts[:'is_supplier_product'] if !opts[:'is_supplier_product'].nil?
      query_params[:'supplierId'] = opts[:'supplier_id'] if !opts[:'supplier_id'].nil?
      query_params[:'currencyId'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'vatTypeId'] = opts[:'vat_type_id'] if !opts[:'vat_type_id'].nil?
      query_params[:'productUnitId'] = opts[:'product_unit_id'] if !opts[:'product_unit_id'].nil?
      query_params[:'departmentId'] = opts[:'department_id'] if !opts[:'department_id'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'costExcludingVatCurrencyFrom'] = opts[:'cost_excluding_vat_currency_from'] if !opts[:'cost_excluding_vat_currency_from'].nil?
      query_params[:'costExcludingVatCurrencyTo'] = opts[:'cost_excluding_vat_currency_to'] if !opts[:'cost_excluding_vat_currency_to'].nil?
      query_params[:'priceExcludingVatCurrencyFrom'] = opts[:'price_excluding_vat_currency_from'] if !opts[:'price_excluding_vat_currency_from'].nil?
      query_params[:'priceExcludingVatCurrencyTo'] = opts[:'price_excluding_vat_currency_to'] if !opts[:'price_excluding_vat_currency_to'].nil?
      query_params[:'priceIncludingVatCurrencyFrom'] = opts[:'price_including_vat_currency_from'] if !opts[:'price_including_vat_currency_from'].nil?
      query_params[:'priceIncludingVatCurrencyTo'] = opts[:'price_including_vat_currency_to'] if !opts[:'price_including_vat_currency_to'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Upload image to Product. Existing image on product will be replaced if exists
    # 
    # @param id Product ID to upload image to.
    # @param file The file
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperProduct]
    def upload_image(id, file, opts = {})
      data, _status_code, _headers = upload_image_with_http_info(id, file, opts)
      data
    end

    # [BETA] Upload image to Product. Existing image on product will be replaced if exists
    # 
    # @param id Product ID to upload image to.
    # @param file The file
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperProduct, Fixnum, Hash)>] ResponseWrapperProduct data, response status code and response headers
    def upload_image_with_http_info(id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.upload_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.upload_image"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ProductApi.upload_image"
      end
      # resource path
      local_var_path = '/product/{id}/image'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProduct')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#upload_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
