=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class BankreconciliationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Add an adjustment to reconciliation by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BankReconciliationAdjustment>] :body Adjustments
    # @return [ListResponseBankReconciliationAdjustment]
    def adjustment(id, opts = {})
      data, _status_code, _headers = adjustment_with_http_info(id, opts)
      data
    end

    # [BETA] Add an adjustment to reconciliation by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BankReconciliationAdjustment>] :body Adjustments
    # @return [Array<(ListResponseBankReconciliationAdjustment, Fixnum, Hash)>] ListResponseBankReconciliationAdjustment data, response status code and response headers
    def adjustment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.adjustment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankreconciliationApi.adjustment"
      end
      # resource path
      local_var_path = '/bank/reconciliation/{id}/:adjustment'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseBankReconciliationAdjustment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#adjustment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get the last closed reconciliation with unmached transactions by account ID.
    # 
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Format is yyyy-MM-dd
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperBankReconciliation]
    def closed_with_unmatched_transactions(account_id, opts = {})
      data, _status_code, _headers = closed_with_unmatched_transactions_with_http_info(account_id, opts)
      data
    end

    # [BETA] Get the last closed reconciliation with unmached transactions by account ID.
    # 
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start Format is yyyy-MM-dd
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperBankReconciliation, Fixnum, Hash)>] ResponseWrapperBankReconciliation data, response status code and response headers
    def closed_with_unmatched_transactions_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.closed_with_unmatched_transactions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BankreconciliationApi.closed_with_unmatched_transactions"
      end
      # resource path
      local_var_path = '/bank/reconciliation/closedWithUnmatchedTransactions'

      # query parameters
      query_params = {}
      query_params[:'accountId'] = account_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#closed_with_unmatched_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete bank reconciliation by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete bank reconciliation by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankreconciliationApi.delete"
      end
      # resource path
      local_var_path = '/bank/reconciliation/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get bank reconciliation.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperBankReconciliation]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get bank reconciliation.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperBankReconciliation, Fixnum, Hash)>] ResponseWrapperBankReconciliation data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankreconciliationApi.get"
      end
      # resource path
      local_var_path = '/bank/reconciliation/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get last closed reconciliation by account ID.
    # 
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after Format is yyyy-MM-dd
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperBankReconciliation]
    def last_closed(account_id, opts = {})
      data, _status_code, _headers = last_closed_with_http_info(account_id, opts)
      data
    end

    # [BETA] Get last closed reconciliation by account ID.
    # 
    # @param account_id Account ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after Format is yyyy-MM-dd
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperBankReconciliation, Fixnum, Hash)>] ResponseWrapperBankReconciliation data, response status code and response headers
    def last_closed_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.last_closed ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BankreconciliationApi.last_closed"
      end
      # resource path
      local_var_path = '/bank/reconciliation/>lastClosed'

      # query parameters
      query_params = {}
      query_params[:'accountId'] = account_id
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#last_closed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Post a bank reconciliation.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BankReconciliation] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperBankReconciliation]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # [BETA] Post a bank reconciliation.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BankReconciliation] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperBankReconciliation, Fixnum, Hash)>] ResponseWrapperBankReconciliation data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.post ...'
      end
      # resource path
      local_var_path = '/bank/reconciliation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update a bank reconciliation.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [BankReconciliation] :body Partial object describing what should be updated
    # @return [ResponseWrapperBankReconciliation]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # [BETA] Update a bank reconciliation.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [BankReconciliation] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperBankReconciliation, Fixnum, Hash)>] ResponseWrapperBankReconciliation data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankreconciliationApi.put"
      end
      # resource path
      local_var_path = '/bank/reconciliation/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find bank reconciliation corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :accounting_period_id List of IDs
    # @option opts [String] :account_id List of IDs
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseBankReconciliation]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Find bank reconciliation corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :accounting_period_id List of IDs
    # @option opts [String] :account_id List of IDs
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseBankReconciliation, Fixnum, Hash)>] ListResponseBankReconciliation data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankreconciliationApi.search ...'
      end
      # resource path
      local_var_path = '/bank/reconciliation'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'accountingPeriodId'] = opts[:'accounting_period_id'] if !opts[:'accounting_period_id'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseBankReconciliation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankreconciliationApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
