=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class TravelDetails
    attr_accessor :is_foreign_travel

    attr_accessor :is_day_trip

    attr_accessor :is_compensation_from_rates

    attr_accessor :departure_date

    attr_accessor :return_date

    attr_accessor :detailed_journey_description

    attr_accessor :departure_from

    attr_accessor :destination

    attr_accessor :departure_time

    attr_accessor :return_time

    attr_accessor :purpose

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_foreign_travel' => :'isForeignTravel',
        :'is_day_trip' => :'isDayTrip',
        :'is_compensation_from_rates' => :'isCompensationFromRates',
        :'departure_date' => :'departureDate',
        :'return_date' => :'returnDate',
        :'detailed_journey_description' => :'detailedJourneyDescription',
        :'departure_from' => :'departureFrom',
        :'destination' => :'destination',
        :'departure_time' => :'departureTime',
        :'return_time' => :'returnTime',
        :'purpose' => :'purpose'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'is_foreign_travel' => :'BOOLEAN',
        :'is_day_trip' => :'BOOLEAN',
        :'is_compensation_from_rates' => :'BOOLEAN',
        :'departure_date' => :'String',
        :'return_date' => :'String',
        :'detailed_journey_description' => :'String',
        :'departure_from' => :'String',
        :'destination' => :'String',
        :'departure_time' => :'String',
        :'return_time' => :'String',
        :'purpose' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'isForeignTravel')
        self.is_foreign_travel = attributes[:'isForeignTravel']
      end

      if attributes.has_key?(:'isDayTrip')
        self.is_day_trip = attributes[:'isDayTrip']
      end

      if attributes.has_key?(:'isCompensationFromRates')
        self.is_compensation_from_rates = attributes[:'isCompensationFromRates']
      end

      if attributes.has_key?(:'departureDate')
        self.departure_date = attributes[:'departureDate']
      end

      if attributes.has_key?(:'returnDate')
        self.return_date = attributes[:'returnDate']
      end

      if attributes.has_key?(:'detailedJourneyDescription')
        self.detailed_journey_description = attributes[:'detailedJourneyDescription']
      end

      if attributes.has_key?(:'departureFrom')
        self.departure_from = attributes[:'departureFrom']
      end

      if attributes.has_key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.has_key?(:'departureTime')
        self.departure_time = attributes[:'departureTime']
      end

      if attributes.has_key?(:'returnTime')
        self.return_time = attributes[:'returnTime']
      end

      if attributes.has_key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@departure_from.nil? && @departure_from.to_s.length > 255
        invalid_properties.push('invalid value for "departure_from", the character length must be smaller than or equal to 255.')
      end

      if !@destination.nil? && @destination.to_s.length > 255
        invalid_properties.push('invalid value for "destination", the character length must be smaller than or equal to 255.')
      end

      if !@departure_time.nil? && @departure_time.to_s.length > 20
        invalid_properties.push('invalid value for "departure_time", the character length must be smaller than or equal to 20.')
      end

      if !@return_time.nil? && @return_time.to_s.length > 20
        invalid_properties.push('invalid value for "return_time", the character length must be smaller than or equal to 20.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@departure_from.nil? && @departure_from.to_s.length > 255
      return false if !@destination.nil? && @destination.to_s.length > 255
      return false if !@departure_time.nil? && @departure_time.to_s.length > 20
      return false if !@return_time.nil? && @return_time.to_s.length > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] departure_from Value to be assigned
    def departure_from=(departure_from)
      if !departure_from.nil? && departure_from.to_s.length > 255
        fail ArgumentError, 'invalid value for "departure_from", the character length must be smaller than or equal to 255.'
      end

      @departure_from = departure_from
    end

    # Custom attribute writer method with validation
    # @param [Object] destination Value to be assigned
    def destination=(destination)
      if !destination.nil? && destination.to_s.length > 255
        fail ArgumentError, 'invalid value for "destination", the character length must be smaller than or equal to 255.'
      end

      @destination = destination
    end

    # Custom attribute writer method with validation
    # @param [Object] departure_time Value to be assigned
    def departure_time=(departure_time)
      if !departure_time.nil? && departure_time.to_s.length > 20
        fail ArgumentError, 'invalid value for "departure_time", the character length must be smaller than or equal to 20.'
      end

      @departure_time = departure_time
    end

    # Custom attribute writer method with validation
    # @param [Object] return_time Value to be assigned
    def return_time=(return_time)
      if !return_time.nil? && return_time.to_s.length > 20
        fail ArgumentError, 'invalid value for "return_time", the character length must be smaller than or equal to 20.'
      end

      @return_time = return_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_foreign_travel == o.is_foreign_travel &&
          is_day_trip == o.is_day_trip &&
          is_compensation_from_rates == o.is_compensation_from_rates &&
          departure_date == o.departure_date &&
          return_date == o.return_date &&
          detailed_journey_description == o.detailed_journey_description &&
          departure_from == o.departure_from &&
          destination == o.destination &&
          departure_time == o.departure_time &&
          return_time == o.return_time &&
          purpose == o.purpose
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_foreign_travel, is_day_trip, is_compensation_from_rates, departure_date, return_date, detailed_journey_description, departure_from, destination, departure_time, return_time, purpose].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
