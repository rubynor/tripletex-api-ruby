=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class BankSettings
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :tax_bank_agreement

    # The remit number of acceptors.
    attr_accessor :remit_number_of_acceptors

    # The showAdviceCurrencyMismatch property.
    attr_accessor :show_advice_currency_mismatch

    # Setting for whether incoming AutoPay payments without KID should be automatically posted, sent to voucher reception or ignored.
    attr_accessor :payment_with_unknown_kid_parse_option

    # Setting for whether the user should have the option to sign payments and agreements with Bank ID in addition to 2FA.
    attr_accessor :sign_auto_pay_with_bank_id

    # Setting for the user to use or not the batch booking for payments.
    attr_accessor :batch_booking_of_payments

    # Employees with payment access
    attr_accessor :employees_with_direct_remit_access

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'tax_bank_agreement' => :'taxBankAgreement',
        :'remit_number_of_acceptors' => :'remitNumberOfAcceptors',
        :'show_advice_currency_mismatch' => :'showAdviceCurrencyMismatch',
        :'payment_with_unknown_kid_parse_option' => :'paymentWithUnknownKidParseOption',
        :'sign_auto_pay_with_bank_id' => :'signAutoPayWithBankId',
        :'batch_booking_of_payments' => :'batchBookingOfPayments',
        :'employees_with_direct_remit_access' => :'employeesWithDirectRemitAccess'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'tax_bank_agreement' => :'BankAgreement',
        :'remit_number_of_acceptors' => :'Integer',
        :'show_advice_currency_mismatch' => :'BOOLEAN',
        :'payment_with_unknown_kid_parse_option' => :'String',
        :'sign_auto_pay_with_bank_id' => :'BOOLEAN',
        :'batch_booking_of_payments' => :'BOOLEAN',
        :'employees_with_direct_remit_access' => :'Array<Employee>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'taxBankAgreement')
        self.tax_bank_agreement = attributes[:'taxBankAgreement']
      end

      if attributes.has_key?(:'remitNumberOfAcceptors')
        self.remit_number_of_acceptors = attributes[:'remitNumberOfAcceptors']
      end

      if attributes.has_key?(:'showAdviceCurrencyMismatch')
        self.show_advice_currency_mismatch = attributes[:'showAdviceCurrencyMismatch']
      end

      if attributes.has_key?(:'paymentWithUnknownKidParseOption')
        self.payment_with_unknown_kid_parse_option = attributes[:'paymentWithUnknownKidParseOption']
      end

      if attributes.has_key?(:'signAutoPayWithBankId')
        self.sign_auto_pay_with_bank_id = attributes[:'signAutoPayWithBankId']
      end

      if attributes.has_key?(:'batchBookingOfPayments')
        self.batch_booking_of_payments = attributes[:'batchBookingOfPayments']
      end

      if attributes.has_key?(:'employeesWithDirectRemitAccess')
        if (value = attributes[:'employeesWithDirectRemitAccess']).is_a?(Array)
          self.employees_with_direct_remit_access = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@remit_number_of_acceptors.nil? && @remit_number_of_acceptors < 1
        invalid_properties.push('invalid value for "remit_number_of_acceptors", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@remit_number_of_acceptors.nil? && @remit_number_of_acceptors < 1
      payment_with_unknown_kid_parse_option_validator = EnumAttributeValidator.new('String', ['VOUCHER_RECEPTION', 'PARSE', 'IGNORE'])
      return false unless payment_with_unknown_kid_parse_option_validator.valid?(@payment_with_unknown_kid_parse_option)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] remit_number_of_acceptors Value to be assigned
    def remit_number_of_acceptors=(remit_number_of_acceptors)
      if !remit_number_of_acceptors.nil? && remit_number_of_acceptors < 1
        fail ArgumentError, 'invalid value for "remit_number_of_acceptors", must be greater than or equal to 1.'
      end

      @remit_number_of_acceptors = remit_number_of_acceptors
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_with_unknown_kid_parse_option Object to be assigned
    def payment_with_unknown_kid_parse_option=(payment_with_unknown_kid_parse_option)
      validator = EnumAttributeValidator.new('String', ['VOUCHER_RECEPTION', 'PARSE', 'IGNORE'])
      unless validator.valid?(payment_with_unknown_kid_parse_option)
        fail ArgumentError, 'invalid value for "payment_with_unknown_kid_parse_option", must be one of #{validator.allowable_values}.'
      end
      @payment_with_unknown_kid_parse_option = payment_with_unknown_kid_parse_option
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          tax_bank_agreement == o.tax_bank_agreement &&
          remit_number_of_acceptors == o.remit_number_of_acceptors &&
          show_advice_currency_mismatch == o.show_advice_currency_mismatch &&
          payment_with_unknown_kid_parse_option == o.payment_with_unknown_kid_parse_option &&
          sign_auto_pay_with_bank_id == o.sign_auto_pay_with_bank_id &&
          batch_booking_of_payments == o.batch_booking_of_payments &&
          employees_with_direct_remit_access == o.employees_with_direct_remit_access
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, tax_bank_agreement, remit_number_of_acceptors, show_advice_currency_mismatch, payment_with_unknown_kid_parse_option, sign_auto_pay_with_bank_id, batch_booking_of_payments, employees_with_direct_remit_access].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
