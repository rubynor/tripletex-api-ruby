=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class CrmprospectApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get prospect by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperProspect]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Get prospect by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperProspect, Fixnum, Hash)>] ResponseWrapperProspect data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CrmprospectApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CrmprospectApi.get"
      end
      # resource path
      local_var_path = '/crm/prospect/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProspect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CrmprospectApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find prospects corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Containing
    # @option opts [String] :description Containing
    # @option opts [String] :created_date_from From and including
    # @option opts [String] :created_date_to To and excluding
    # @option opts [String] :customer_id Equals
    # @option opts [String] :sales_employee_id Equals
    # @option opts [BOOLEAN] :is_closed Equals
    # @option opts [String] :closed_reason Equals
    # @option opts [String] :closed_date_from From and including
    # @option opts [String] :closed_date_to To and excluding
    # @option opts [String] :competitor Containing
    # @option opts [String] :prospect_type Equals
    # @option opts [String] :project_id Equals
    # @option opts [String] :project_offer_id Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseProspect]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find prospects corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Containing
    # @option opts [String] :description Containing
    # @option opts [String] :created_date_from From and including
    # @option opts [String] :created_date_to To and excluding
    # @option opts [String] :customer_id Equals
    # @option opts [String] :sales_employee_id Equals
    # @option opts [BOOLEAN] :is_closed Equals
    # @option opts [String] :closed_reason Equals
    # @option opts [String] :closed_date_from From and including
    # @option opts [String] :closed_date_to To and excluding
    # @option opts [String] :competitor Containing
    # @option opts [String] :prospect_type Equals
    # @option opts [String] :project_id Equals
    # @option opts [String] :project_offer_id Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseProspect, Fixnum, Hash)>] ListResponseProspect data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CrmprospectApi.search ...'
      end
      # resource path
      local_var_path = '/crm/prospect'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'createdDateFrom'] = opts[:'created_date_from'] if !opts[:'created_date_from'].nil?
      query_params[:'createdDateTo'] = opts[:'created_date_to'] if !opts[:'created_date_to'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'salesEmployeeId'] = opts[:'sales_employee_id'] if !opts[:'sales_employee_id'].nil?
      query_params[:'isClosed'] = opts[:'is_closed'] if !opts[:'is_closed'].nil?
      query_params[:'closedReason'] = opts[:'closed_reason'] if !opts[:'closed_reason'].nil?
      query_params[:'closedDateFrom'] = opts[:'closed_date_from'] if !opts[:'closed_date_from'].nil?
      query_params[:'closedDateTo'] = opts[:'closed_date_to'] if !opts[:'closed_date_to'].nil?
      query_params[:'competitor'] = opts[:'competitor'] if !opts[:'competitor'].nil?
      query_params[:'prospectType'] = opts[:'prospect_type'] if !opts[:'prospect_type'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'projectOfferId'] = opts[:'project_offer_id'] if !opts[:'project_offer_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProspect')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CrmprospectApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
