=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class PurchaseOrdergoodsReceiptApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Purchase Order ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_rest_order Create restorder if quantity received is less than ordered (default to false)
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ResponseWrapperPurchaseOrder]
    def confirm(id, opts = {})
      data, _status_code, _headers = confirm_with_http_info(id, opts)
      data
    end

    # [BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Purchase Order ID.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_rest_order Create restorder if quantity received is less than ordered
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperPurchaseOrder, Fixnum, Hash)>] ResponseWrapperPurchaseOrder data, response status code and response headers
    def confirm_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.confirm ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.confirm"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}/:confirm'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'createRestOrder'] = opts[:'create_rest_order'] if !opts[:'create_rest_order'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPurchaseOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.delete"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_by_ids(ids, opts = {})
      delete_by_ids_with_http_info(ids, opts)
      nil
    end

    # [BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_by_ids_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.delete_by_ids ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling PurchaseOrdergoodsReceiptApi.delete_by_ids"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/list'

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#delete_by_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperGoodsReceipt]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperGoodsReceipt, Fixnum, Hash)>] ResponseWrapperGoodsReceipt data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.get"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GoodsReceipt] :body JSON representing the new object to be created. Should not have ID and version set.
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ResponseWrapperGoodsReceipt]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # [BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [GoodsReceipt] :body JSON representing the new object to be created. Should not have ID and version set.
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperGoodsReceipt, Fixnum, Hash)>] ResponseWrapperGoodsReceipt data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.post ...'
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt'

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<GoodsReceipt>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ListResponseGoodsReceipt]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # [BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<GoodsReceipt>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseGoodsReceipt, Fixnum, Hash)>] ListResponseGoodsReceipt data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.post_list ...'
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/list'

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Goods Receipt ID.
    # @param [Hash] opts the optional parameters
    # @option opts [GoodsReceipt] :body Partial object describing what should be updated
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ResponseWrapperGoodsReceipt]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # [BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Goods Receipt ID.
    # @param [Hash] opts the optional parameters
    # @option opts [GoodsReceipt] :body Partial object describing what should be updated
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperGoodsReceipt, Fixnum, Hash)>] ResponseWrapperGoodsReceipt data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.put"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Purchase Order ID.
    # @param received_date The approval date for the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :inventory_id ID of inventory. Main inventory is set as default
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ResponseWrapperPurchaseOrder]
    def receive_and_confirm(id, received_date, opts = {})
      data, _status_code, _headers = receive_and_confirm_with_http_info(id, received_date, opts)
      data
    end

    # [BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Purchase Order ID.
    # @param received_date The approval date for the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :inventory_id ID of inventory. Main inventory is set as default
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperPurchaseOrder, Fixnum, Hash)>] ResponseWrapperPurchaseOrder data, response status code and response headers
    def receive_and_confirm_with_http_info(id, received_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.receive_and_confirm ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.receive_and_confirm"
      end
      # verify the required parameter 'received_date' is set
      if @api_client.config.client_side_validation && received_date.nil?
        fail ArgumentError, "Missing the required parameter 'received_date' when calling PurchaseOrdergoodsReceiptApi.receive_and_confirm"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'receivedDate'] = received_date
      query_params[:'inventoryId'] = opts[:'inventory_id'] if !opts[:'inventory_id'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPurchaseOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#receive_and_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param id Purchase Order ID.
    # @param registration_date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :inventory_id ID of inventory. Main inventory is set as default
    # @option opts [String] :comment Containing
    # @option opts [String] :fields Fields filter pattern (default to *)
    # @return [ResponseWrapperGoodsReceipt]
    def register_goods_receipt(id, registration_date, opts = {})
      data, _status_code, _headers = register_goods_receipt_with_http_info(id, registration_date, opts)
      data
    end

    # [BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param id Purchase Order ID.
    # @param registration_date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :inventory_id ID of inventory. Main inventory is set as default
    # @option opts [String] :comment Containing
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperGoodsReceipt, Fixnum, Hash)>] ResponseWrapperGoodsReceipt data, response status code and response headers
    def register_goods_receipt_with_http_info(id, registration_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.register_goods_receipt ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PurchaseOrdergoodsReceiptApi.register_goods_receipt"
      end
      # verify the required parameter 'registration_date' is set
      if @api_client.config.client_side_validation && registration_date.nil?
        fail ArgumentError, "Missing the required parameter 'registration_date' when calling PurchaseOrdergoodsReceiptApi.register_goods_receipt"
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'registrationDate'] = registration_date
      query_params[:'inventoryId'] = opts[:'inventory_id'] if !opts[:'inventory_id'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#register_goods_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :received_date_from Format is yyyy-MM-dd (from and incl.).
    # @option opts [String] :received_date_to Format is yyyy-MM-dd (to and incl.).
    # @option opts [String] :status Equals
    # @option opts [BOOLEAN] :without_purchase Equals (default to false)
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseGoodsReceipt]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in &#39;Our customer account&#39;
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :received_date_from Format is yyyy-MM-dd (from and incl.).
    # @option opts [String] :received_date_to Format is yyyy-MM-dd (to and incl.).
    # @option opts [String] :status Equals
    # @option opts [BOOLEAN] :without_purchase Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseGoodsReceipt, Fixnum, Hash)>] ListResponseGoodsReceipt data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PurchaseOrdergoodsReceiptApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['STATUS_OPEN', 'STATUS_CONFIRMED'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of STATUS_OPEN, STATUS_CONFIRMED'
      end
      # resource path
      local_var_path = '/purchaseOrder/goodsReceipt'

      # query parameters
      query_params = {}
      query_params[:'receivedDateFrom'] = opts[:'received_date_from'] if !opts[:'received_date_from'].nil?
      query_params[:'receivedDateTo'] = opts[:'received_date_to'] if !opts[:'received_date_to'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'withoutPurchase'] = opts[:'without_purchase'] if !opts[:'without_purchase'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseGoodsReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PurchaseOrdergoodsReceiptApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
