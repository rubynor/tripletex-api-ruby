=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class TravelExpenseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Approve travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [ListResponseTravelExpense]
    def approve(opts = {})
      data, _status_code, _headers = approve_with_http_info(opts)
      data
    end

    # [BETA] Approve travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def approve_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.approve ...'
      end
      # resource path
      local_var_path = '/travelExpense/:approve'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Copy travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperTravelExpense]
    def copy(id, opts = {})
      data, _status_code, _headers = copy_with_http_info(id, opts)
      data
    end

    # [BETA] Copy travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperTravelExpense, Fixnum, Hash)>] ResponseWrapperTravelExpense data, response status code and response headers
    def copy_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.copy ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TravelExpenseApi.copy"
      end
      # resource path
      local_var_path = '/travelExpense/:copy'

      # query parameters
      query_params = {}
      query_params[:'id'] = id

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create vouchers
    # 
    # @param date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [ListResponseTravelExpense]
    def create_vouchers(date, opts = {})
      data, _status_code, _headers = create_vouchers_with_http_info(date, opts)
      data
    end

    # [BETA] Create vouchers
    # 
    # @param date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def create_vouchers_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.create_vouchers ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling TravelExpenseApi.create_vouchers"
      end
      # resource path
      local_var_path = '/travelExpense/:createVouchers'

      # query parameters
      query_params = {}
      query_params[:'date'] = date
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#create_vouchers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TravelExpenseApi.delete"
      end
      # resource path
      local_var_path = '/travelExpense/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Delete attachment.
    # 
    # @param travel_expense_id ID of attachment containing the attachment to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version Version of voucher containing the attachment to delete.
    # @option opts [BOOLEAN] :send_to_inbox Should the attachment be sent to inbox rather than deleted? (default to false)
    # @option opts [BOOLEAN] :split If sendToInbox is true, should the attachment be split into one voucher per page? (default to false)
    # @return [nil]
    def delete_attachment(travel_expense_id, opts = {})
      delete_attachment_with_http_info(travel_expense_id, opts)
      nil
    end

    # [BETA] Delete attachment.
    # 
    # @param travel_expense_id ID of attachment containing the attachment to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version Version of voucher containing the attachment to delete.
    # @option opts [BOOLEAN] :send_to_inbox Should the attachment be sent to inbox rather than deleted?
    # @option opts [BOOLEAN] :split If sendToInbox is true, should the attachment be split into one voucher per page?
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_attachment_with_http_info(travel_expense_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.delete_attachment ...'
      end
      # verify the required parameter 'travel_expense_id' is set
      if @api_client.config.client_side_validation && travel_expense_id.nil?
        fail ArgumentError, "Missing the required parameter 'travel_expense_id' when calling TravelExpenseApi.delete_attachment"
      end
      if @api_client.config.client_side_validation && !opts[:'version'].nil? && opts[:'version'] < 0
        fail ArgumentError, 'invalid value for "opts[:"version"]" when calling TravelExpenseApi.delete_attachment, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/travelExpense/{travelExpenseId}/attachment'.sub('{' + 'travelExpenseId' + '}', travel_expense_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'sendToInbox'] = opts[:'send_to_inbox'] if !opts[:'send_to_inbox'].nil?
      query_params[:'split'] = opts[:'split'] if !opts[:'split'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#delete_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Deliver travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [ListResponseTravelExpense]
    def deliver(opts = {})
      data, _status_code, _headers = deliver_with_http_info(opts)
      data
    end

    # [BETA] Deliver travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def deliver_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.deliver ...'
      end
      # resource path
      local_var_path = '/travelExpense/:deliver'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#deliver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get attachment by travel expense ID.
    # 
    # @param travel_expense_id Travel Expense ID from which PDF is downloaded.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_attachment(travel_expense_id, opts = {})
      data, _status_code, _headers = download_attachment_with_http_info(travel_expense_id, opts)
      data
    end

    # Get attachment by travel expense ID.
    # 
    # @param travel_expense_id Travel Expense ID from which PDF is downloaded.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def download_attachment_with_http_info(travel_expense_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.download_attachment ...'
      end
      # verify the required parameter 'travel_expense_id' is set
      if @api_client.config.client_side_validation && travel_expense_id.nil?
        fail ArgumentError, "Missing the required parameter 'travel_expense_id' when calling TravelExpenseApi.download_attachment"
      end
      # resource path
      local_var_path = '/travelExpense/{travelExpenseId}/attachment'.sub('{' + 'travelExpenseId' + '}', travel_expense_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#download_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get travel expense by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperTravelExpense]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get travel expense by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperTravelExpense, Fixnum, Hash)>] ResponseWrapperTravelExpense data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TravelExpenseApi.get"
      end
      # resource path
      local_var_path = '/travelExpense/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create travel expense.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [TravelExpense] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperTravelExpense]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # [BETA] Create travel expense.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [TravelExpense] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperTravelExpense, Fixnum, Hash)>] ResponseWrapperTravelExpense data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.post ...'
      end
      # resource path
      local_var_path = '/travelExpense'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [TravelExpense] :body Partial object describing what should be updated
    # @return [ResponseWrapperTravelExpense]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # [BETA] Update travel expense.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [TravelExpense] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperTravelExpense, Fixnum, Hash)>] ResponseWrapperTravelExpense data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TravelExpenseApi.put"
      end
      # resource path
      local_var_path = '/travelExpense/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find travel expenses corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id Equals
    # @option opts [String] :department_id Equals
    # @option opts [String] :project_id Equals
    # @option opts [String] :project_manager_id Equals
    # @option opts [String] :departure_date_from From and including
    # @option opts [String] :return_date_to To and excluding
    # @option opts [String] :state category (default to ALL)
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseTravelExpense]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Find travel expenses corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :employee_id Equals
    # @option opts [String] :department_id Equals
    # @option opts [String] :project_id Equals
    # @option opts [String] :project_manager_id Equals
    # @option opts [String] :departure_date_from From and including
    # @option opts [String] :return_date_to To and excluding
    # @option opts [String] :state category
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !['ALL', 'OPEN', 'APPROVED', 'SALARY_PAID', 'DELIVERED'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of ALL, OPEN, APPROVED, SALARY_PAID, DELIVERED'
      end
      # resource path
      local_var_path = '/travelExpense'

      # query parameters
      query_params = {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'departmentId'] = opts[:'department_id'] if !opts[:'department_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'projectManagerId'] = opts[:'project_manager_id'] if !opts[:'project_manager_id'].nil?
      query_params[:'departureDateFrom'] = opts[:'departure_date_from'] if !opts[:'departure_date_from'].nil?
      query_params[:'returnDateTo'] = opts[:'return_date_to'] if !opts[:'return_date_to'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Unapprove travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [ListResponseTravelExpense]
    def unapprove(opts = {})
      data, _status_code, _headers = unapprove_with_http_info(opts)
      data
    end

    # [BETA] Unapprove travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def unapprove_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.unapprove ...'
      end
      # resource path
      local_var_path = '/travelExpense/:unapprove'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#unapprove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Undeliver travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [ListResponseTravelExpense]
    def undeliver(opts = {})
      data, _status_code, _headers = undeliver_with_http_info(opts)
      data
    end

    # [BETA] Undeliver travel expenses.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id ID of the elements
    # @return [Array<(ListResponseTravelExpense, Fixnum, Hash)>] ListResponseTravelExpense data, response status code and response headers
    def undeliver_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.undeliver ...'
      end
      # resource path
      local_var_path = '/travelExpense/:undeliver'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpense')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#undeliver\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload attachment to travel expense.
    # 
    # @param travel_expense_id Travel Expense ID to upload attachment to.
    # @param file The file
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment (default to false)
    # @return [nil]
    def upload_attachment(travel_expense_id, file, opts = {})
      upload_attachment_with_http_info(travel_expense_id, file, opts)
      nil
    end

    # Upload attachment to travel expense.
    # 
    # @param travel_expense_id Travel Expense ID to upload attachment to.
    # @param file The file
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_attachment_with_http_info(travel_expense_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.upload_attachment ...'
      end
      # verify the required parameter 'travel_expense_id' is set
      if @api_client.config.client_side_validation && travel_expense_id.nil?
        fail ArgumentError, "Missing the required parameter 'travel_expense_id' when calling TravelExpenseApi.upload_attachment"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling TravelExpenseApi.upload_attachment"
      end
      # resource path
      local_var_path = '/travelExpense/{travelExpenseId}/attachment'.sub('{' + 'travelExpenseId' + '}', travel_expense_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'createNewCost'] = opts[:'create_new_cost'] if !opts[:'create_new_cost'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#upload_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload multiple attachments to travel expense.
    # 
    # @param travel_expense_id Travel Expense ID to upload attachment to.
    # @param body Multipart files
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment (default to false)
    # @return [nil]
    def upload_attachments(travel_expense_id, body, opts = {})
      upload_attachments_with_http_info(travel_expense_id, body, opts)
      nil
    end

    # Upload multiple attachments to travel expense.
    # 
    # @param travel_expense_id Travel Expense ID to upload attachment to.
    # @param body Multipart files
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def upload_attachments_with_http_info(travel_expense_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenseApi.upload_attachments ...'
      end
      # verify the required parameter 'travel_expense_id' is set
      if @api_client.config.client_side_validation && travel_expense_id.nil?
        fail ArgumentError, "Missing the required parameter 'travel_expense_id' when calling TravelExpenseApi.upload_attachments"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TravelExpenseApi.upload_attachments"
      end
      # resource path
      local_var_path = '/travelExpense/{travelExpenseId}/attachment/list'.sub('{' + 'travelExpenseId' + '}', travel_expense_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'createNewCost'] = opts[:'create_new_cost'] if !opts[:'create_new_cost'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenseApi#upload_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
