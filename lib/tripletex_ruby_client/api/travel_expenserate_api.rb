=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class TravelExpenserateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Get travel expense rate by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperTravelExpenseRate]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get travel expense rate by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperTravelExpenseRate, Fixnum, Hash)>] ResponseWrapperTravelExpenseRate data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenserateApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TravelExpenserateApi.get"
      end
      # resource path
      local_var_path = '/travelExpense/rate/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperTravelExpenseRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenserateApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find rates corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rate_category_id Equals
    # @option opts [String] :type Equals
    # @option opts [BOOLEAN] :is_valid_day_trip Equals
    # @option opts [BOOLEAN] :is_valid_accommodation Equals
    # @option opts [BOOLEAN] :is_valid_domestic Equals
    # @option opts [BOOLEAN] :is_valid_foreign_travel Equals
    # @option opts [BOOLEAN] :requires_zone Equals
    # @option opts [BOOLEAN] :requires_overnight_accommodation Equals
    # @option opts [String] :date_from From and including
    # @option opts [String] :date_to To and excluding
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseTravelExpenseRate]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Find rates corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rate_category_id Equals
    # @option opts [String] :type Equals
    # @option opts [BOOLEAN] :is_valid_day_trip Equals
    # @option opts [BOOLEAN] :is_valid_accommodation Equals
    # @option opts [BOOLEAN] :is_valid_domestic Equals
    # @option opts [BOOLEAN] :is_valid_foreign_travel Equals
    # @option opts [BOOLEAN] :requires_zone Equals
    # @option opts [BOOLEAN] :requires_overnight_accommodation Equals
    # @option opts [String] :date_from From and including
    # @option opts [String] :date_to To and excluding
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseTravelExpenseRate, Fixnum, Hash)>] ListResponseTravelExpenseRate data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TravelExpenserateApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['PER_DIEM', 'ACCOMMODATION_ALLOWANCE', 'MILEAGE_ALLOWANCE'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of PER_DIEM, ACCOMMODATION_ALLOWANCE, MILEAGE_ALLOWANCE'
      end
      # resource path
      local_var_path = '/travelExpense/rate'

      # query parameters
      query_params = {}
      query_params[:'rateCategoryId'] = opts[:'rate_category_id'] if !opts[:'rate_category_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'isValidDayTrip'] = opts[:'is_valid_day_trip'] if !opts[:'is_valid_day_trip'].nil?
      query_params[:'isValidAccommodation'] = opts[:'is_valid_accommodation'] if !opts[:'is_valid_accommodation'].nil?
      query_params[:'isValidDomestic'] = opts[:'is_valid_domestic'] if !opts[:'is_valid_domestic'].nil?
      query_params[:'isValidForeignTravel'] = opts[:'is_valid_foreign_travel'] if !opts[:'is_valid_foreign_travel'].nil?
      query_params[:'requiresZone'] = opts[:'requires_zone'] if !opts[:'requires_zone'].nil?
      query_params[:'requiresOvernightAccommodation'] = opts[:'requires_overnight_accommodation'] if !opts[:'requires_overnight_accommodation'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseTravelExpenseRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TravelExpenserateApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
