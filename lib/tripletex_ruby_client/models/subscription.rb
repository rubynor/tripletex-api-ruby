=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class Subscription
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    # Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.
    attr_accessor :event

    # The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.
    attr_accessor :target_url

    # The fields in the object delivered with the notification callback, nested as in other API calls.
    attr_accessor :fields

    # The status of the subscription.
    attr_accessor :status

    # Custom authentication header name
    attr_accessor :auth_header_name

    # Custom authentication header value (write only)
    attr_accessor :auth_header_value

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'event' => :'event',
        :'target_url' => :'targetUrl',
        :'fields' => :'fields',
        :'status' => :'status',
        :'auth_header_name' => :'authHeaderName',
        :'auth_header_value' => :'authHeaderValue'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'event' => :'String',
        :'target_url' => :'String',
        :'fields' => :'String',
        :'status' => :'String',
        :'auth_header_name' => :'String',
        :'auth_header_value' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'event')
        self.event = attributes[:'event']
      end

      if attributes.has_key?(:'targetUrl')
        self.target_url = attributes[:'targetUrl']
      end

      if attributes.has_key?(:'fields')
        self.fields = attributes[:'fields']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'authHeaderName')
        self.auth_header_name = attributes[:'authHeaderName']
      end

      if attributes.has_key?(:'authHeaderValue')
        self.auth_header_value = attributes[:'authHeaderValue']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @event.nil?
        invalid_properties.push('invalid value for "event", event cannot be nil.')
      end

      if @event.to_s.length > 255
        invalid_properties.push('invalid value for "event", the character length must be smaller than or equal to 255.')
      end

      if @event.to_s.length < 1
        invalid_properties.push('invalid value for "event", the character length must be great than or equal to 1.')
      end

      if @target_url.nil?
        invalid_properties.push('invalid value for "target_url", target_url cannot be nil.')
      end

      if @target_url.to_s.length > 255
        invalid_properties.push('invalid value for "target_url", the character length must be smaller than or equal to 255.')
      end

      if @target_url.to_s.length < 1
        invalid_properties.push('invalid value for "target_url", the character length must be great than or equal to 1.')
      end

      if !@fields.nil? && @fields.to_s.length > 255
        invalid_properties.push('invalid value for "fields", the character length must be smaller than or equal to 255.')
      end

      if !@auth_header_name.nil? && @auth_header_name.to_s.length > 255
        invalid_properties.push('invalid value for "auth_header_name", the character length must be smaller than or equal to 255.')
      end

      if !@auth_header_value.nil? && @auth_header_value.to_s.length > 4096
        invalid_properties.push('invalid value for "auth_header_value", the character length must be smaller than or equal to 4096.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @event.nil?
      return false if @event.to_s.length > 255
      return false if @event.to_s.length < 1
      return false if @target_url.nil?
      return false if @target_url.to_s.length > 255
      return false if @target_url.to_s.length < 1
      return false if !@fields.nil? && @fields.to_s.length > 255
      status_validator = EnumAttributeValidator.new('String', ['ACTIVE', 'DISABLED', 'DISABLED_TOO_MANY_ERRORS', 'DISABLED_RATE_LIMIT_EXCEEDED', 'DISABLED_MISUSE'])
      return false unless status_validator.valid?(@status)
      return false if !@auth_header_name.nil? && @auth_header_name.to_s.length > 255
      return false if !@auth_header_value.nil? && @auth_header_value.to_s.length > 4096
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] event Value to be assigned
    def event=(event)
      if event.nil?
        fail ArgumentError, 'event cannot be nil'
      end

      if event.to_s.length > 255
        fail ArgumentError, 'invalid value for "event", the character length must be smaller than or equal to 255.'
      end

      if event.to_s.length < 1
        fail ArgumentError, 'invalid value for "event", the character length must be great than or equal to 1.'
      end

      @event = event
    end

    # Custom attribute writer method with validation
    # @param [Object] target_url Value to be assigned
    def target_url=(target_url)
      if target_url.nil?
        fail ArgumentError, 'target_url cannot be nil'
      end

      if target_url.to_s.length > 255
        fail ArgumentError, 'invalid value for "target_url", the character length must be smaller than or equal to 255.'
      end

      if target_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "target_url", the character length must be great than or equal to 1.'
      end

      @target_url = target_url
    end

    # Custom attribute writer method with validation
    # @param [Object] fields Value to be assigned
    def fields=(fields)
      if !fields.nil? && fields.to_s.length > 255
        fail ArgumentError, 'invalid value for "fields", the character length must be smaller than or equal to 255.'
      end

      @fields = fields
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['ACTIVE', 'DISABLED', 'DISABLED_TOO_MANY_ERRORS', 'DISABLED_RATE_LIMIT_EXCEEDED', 'DISABLED_MISUSE'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_header_name Value to be assigned
    def auth_header_name=(auth_header_name)
      if !auth_header_name.nil? && auth_header_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "auth_header_name", the character length must be smaller than or equal to 255.'
      end

      @auth_header_name = auth_header_name
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_header_value Value to be assigned
    def auth_header_value=(auth_header_value)
      if !auth_header_value.nil? && auth_header_value.to_s.length > 4096
        fail ArgumentError, 'invalid value for "auth_header_value", the character length must be smaller than or equal to 4096.'
      end

      @auth_header_value = auth_header_value
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          event == o.event &&
          target_url == o.target_url &&
          fields == o.fields &&
          status == o.status &&
          auth_header_name == o.auth_header_name &&
          auth_header_value == o.auth_header_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, event, target_url, fields, status, auth_header_name, auth_header_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
