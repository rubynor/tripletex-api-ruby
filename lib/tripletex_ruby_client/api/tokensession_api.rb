=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class TokensessionApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create session token.
    # 
    # @param consumer_token Token of the API consumer
    # @param employee_token The employees token
    # @param expiration_date Expiration date for the combined token
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperSessionToken]
    def create(consumer_token, employee_token, expiration_date, opts = {})
      data, _status_code, _headers = create_with_http_info(consumer_token, employee_token, expiration_date, opts)
      data
    end

    # Create session token.
    # 
    # @param consumer_token Token of the API consumer
    # @param employee_token The employees token
    # @param expiration_date Expiration date for the combined token
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperSessionToken, Fixnum, Hash)>] ResponseWrapperSessionToken data, response status code and response headers
    def create_with_http_info(consumer_token, employee_token, expiration_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensessionApi.create ...'
      end
      # verify the required parameter 'consumer_token' is set
      if @api_client.config.client_side_validation && consumer_token.nil?
        fail ArgumentError, "Missing the required parameter 'consumer_token' when calling TokensessionApi.create"
      end
      # verify the required parameter 'employee_token' is set
      if @api_client.config.client_side_validation && employee_token.nil?
        fail ArgumentError, "Missing the required parameter 'employee_token' when calling TokensessionApi.create"
      end
      # verify the required parameter 'expiration_date' is set
      if @api_client.config.client_side_validation && expiration_date.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_date' when calling TokensessionApi.create"
      end
      # resource path
      local_var_path = '/token/session/:create'

      # query parameters
      query_params = {}
      query_params[:'consumerToken'] = consumer_token
      query_params[:'employeeToken'] = employee_token
      query_params[:'expirationDate'] = expiration_date

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperSessionToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensessionApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete session token.
    # 
    # @param token The login token string to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(token, opts = {})
      delete_with_http_info(token, opts)
      nil
    end

    # Delete session token.
    # 
    # @param token The login token string to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensessionApi.delete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling TokensessionApi.delete"
      end
      # resource path
      local_var_path = '/token/session/{token}'.sub('{' + 'token' + '}', token.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensessionApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find information about the current user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperLoggedInUserInfoDTO]
    def who_am_i(opts = {})
      data, _status_code, _headers = who_am_i_with_http_info(opts)
      data
    end

    # Find information about the current user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperLoggedInUserInfoDTO, Fixnum, Hash)>] ResponseWrapperLoggedInUserInfoDTO data, response status code and response headers
    def who_am_i_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TokensessionApi.who_am_i ...'
      end
      # resource path
      local_var_path = '/token/session/>whoAmI'

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperLoggedInUserInfoDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokensessionApi#who_am_i\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
