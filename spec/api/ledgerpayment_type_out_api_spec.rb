=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::LedgerpaymentTypeOutApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LedgerpaymentTypeOutApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::LedgerpaymentTypeOutApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LedgerpaymentTypeOutApi' do
    it 'should create an instance of LedgerpaymentTypeOutApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::LedgerpaymentTypeOutApi)
    end
  end

  # unit tests for delete
  # [BETA] Delete payment type for outgoing payments by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # [BETA] Get payment type for outgoing payments by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperPaymentTypeOut]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post
  # [BETA] Create new payment type for outgoing payments
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentTypeOut] :body JSON representing the new object to be created. Should not have ID and version set.
  # @return [ResponseWrapperPaymentTypeOut]
  describe 'post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list
  # [BETA] Create multiple payment types for outgoing payments at once
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PaymentTypeOut>] :body JSON representing a list of new object to be created. Should not have ID and version set.
  # @return [ListResponsePaymentTypeOut]
  describe 'post_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put
  # [BETA] Update existing payment type for outgoing payments
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [PaymentTypeOut] :body Partial object describing what should be updated
  # @return [ResponseWrapperPaymentTypeOut]
  describe 'put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put_list
  # [BETA] Update multiple payment types for outgoing payments at once
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<PaymentTypeOut>] :body JSON representing updates to object. Should have ID and version set.
  # @return [ListResponsePaymentTypeOut]
  describe 'put_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # [BETA] Gets payment types for outgoing payments
  # This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section &#39;Outgoing Payments&#39; under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id List of IDs
  # @option opts [String] :description Containing
  # @option opts [BOOLEAN] :is_inactive Equals
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponsePaymentTypeOut]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
