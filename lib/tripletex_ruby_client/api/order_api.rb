=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.
    # 
    # @param id ID of order to approve for subscription invoicing.
    # @param invoice_date The approval date for the subscription.
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperInvoice]
    def approve_subscription_invoice(id, invoice_date, opts = {})
      data, _status_code, _headers = approve_subscription_invoice_with_http_info(id, invoice_date, opts)
      data
    end

    # To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.
    # 
    # @param id ID of order to approve for subscription invoicing.
    # @param invoice_date The approval date for the subscription.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperInvoice, Fixnum, Hash)>] ResponseWrapperInvoice data, response status code and response headers
    def approve_subscription_invoice_with_http_info(id, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.approve_subscription_invoice ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.approve_subscription_invoice"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling OrderApi.approve_subscription_invoice"
      end
      # resource path
      local_var_path = '/order/{id}/:approveSubscriptionInvoice'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'invoiceDate'] = invoice_date

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperInvoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#approve_subscription_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Attach document to specified order ID.
    # 
    # @param file The file
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperDocumentArchive]
    def attach(file, id, opts = {})
      data, _status_code, _headers = attach_with_http_info(file, id, opts)
      data
    end

    # Attach document to specified order ID.
    # 
    # @param file The file
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperDocumentArchive, Fixnum, Hash)>] ResponseWrapperDocumentArchive data, response status code and response headers
    def attach_with_http_info(file, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.attach ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling OrderApi.attach"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.attach"
      end
      # resource path
      local_var_path = '/order/{id}/:attach'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperDocumentArchive')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#attach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get order by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperOrder]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Get order by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperOrder, Fixnum, Hash)>] ResponseWrapperOrder data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.get"
      end
      # resource path
      local_var_path = '/order/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create new invoice from order.
    # 
    # @param id ID of order to invoice.
    # @param invoice_date The invoice date
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :send_to_customer Send invoice to customer (default to true)
    # @option opts [Integer] :payment_type_id Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.
    # @option opts [Float] :paid_amount Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.
    # @option opts [Float] :paid_amount_account_currency Amount paid in payment type currency
    # @option opts [Integer] :payment_type_id_rest_amount Payment type of rest amount. It is possible to have two prepaid payments when invoicing. If paymentTypeIdRestAmount &gt; 0, this second payment will be calculated as invoice amount - paidAmount
    # @option opts [Float] :paid_amount_account_currency_rest Amount rest in payment type currency
    # @option opts [String] :create_on_account Create on account(a konto)
    # @option opts [Float] :amount_on_account Amount on account (default to 0.0)
    # @option opts [String] :on_account_comment On account comment
    # @option opts [BOOLEAN] :create_backorder Create a backorder for this order, available only for pilot users (default to false)
    # @return [ResponseWrapperInvoice]
    def invoice(id, invoice_date, opts = {})
      data, _status_code, _headers = invoice_with_http_info(id, invoice_date, opts)
      data
    end

    # Create new invoice from order.
    # 
    # @param id ID of order to invoice.
    # @param invoice_date The invoice date
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :send_to_customer Send invoice to customer
    # @option opts [Integer] :payment_type_id Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.
    # @option opts [Float] :paid_amount Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.
    # @option opts [Float] :paid_amount_account_currency Amount paid in payment type currency
    # @option opts [Integer] :payment_type_id_rest_amount Payment type of rest amount. It is possible to have two prepaid payments when invoicing. If paymentTypeIdRestAmount &gt; 0, this second payment will be calculated as invoice amount - paidAmount
    # @option opts [Float] :paid_amount_account_currency_rest Amount rest in payment type currency
    # @option opts [String] :create_on_account Create on account(a konto)
    # @option opts [Float] :amount_on_account Amount on account
    # @option opts [String] :on_account_comment On account comment
    # @option opts [BOOLEAN] :create_backorder Create a backorder for this order, available only for pilot users
    # @return [Array<(ResponseWrapperInvoice, Fixnum, Hash)>] ResponseWrapperInvoice data, response status code and response headers
    def invoice_with_http_info(id, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.invoice ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.invoice"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling OrderApi.invoice"
      end
      if @api_client.config.client_side_validation && opts[:'create_on_account'] && !['NONE', 'WITH_VAT', 'WITHOUT_VAT'].include?(opts[:'create_on_account'])
        fail ArgumentError, 'invalid value for "create_on_account", must be one of NONE, WITH_VAT, WITHOUT_VAT'
      end
      # resource path
      local_var_path = '/order/{id}/:invoice'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'invoiceDate'] = invoice_date
      query_params[:'sendToCustomer'] = opts[:'send_to_customer'] if !opts[:'send_to_customer'].nil?
      query_params[:'paymentTypeId'] = opts[:'payment_type_id'] if !opts[:'payment_type_id'].nil?
      query_params[:'paidAmount'] = opts[:'paid_amount'] if !opts[:'paid_amount'].nil?
      query_params[:'paidAmountAccountCurrency'] = opts[:'paid_amount_account_currency'] if !opts[:'paid_amount_account_currency'].nil?
      query_params[:'paymentTypeIdRestAmount'] = opts[:'payment_type_id_rest_amount'] if !opts[:'payment_type_id_rest_amount'].nil?
      query_params[:'paidAmountAccountCurrencyRest'] = opts[:'paid_amount_account_currency_rest'] if !opts[:'paid_amount_account_currency_rest'].nil?
      query_params[:'createOnAccount'] = opts[:'create_on_account'] if !opts[:'create_on_account'].nil?
      query_params[:'amountOnAccount'] = opts[:'amount_on_account'] if !opts[:'amount_on_account'].nil?
      query_params[:'onAccountComment'] = opts[:'on_account_comment'] if !opts[:'on_account_comment'].nil?
      query_params[:'createBackorder'] = opts[:'create_backorder'] if !opts[:'create_backorder'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperInvoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.
    # 
    # @param id List of Order IDs - to the same customer, separated by comma.
    # @param invoice_date The invoice date
    # @param [Hash] opts the optional parameters
    # @return [ResponseWrapperInvoice]
    def invoice_multiple_orders(id, invoice_date, opts = {})
      data, _status_code, _headers = invoice_multiple_orders_with_http_info(id, invoice_date, opts)
      data
    end

    # [BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.
    # 
    # @param id List of Order IDs - to the same customer, separated by comma.
    # @param invoice_date The invoice date
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseWrapperInvoice, Fixnum, Hash)>] ResponseWrapperInvoice data, response status code and response headers
    def invoice_multiple_orders_with_http_info(id, invoice_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.invoice_multiple_orders ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.invoice_multiple_orders"
      end
      # verify the required parameter 'invoice_date' is set
      if @api_client.config.client_side_validation && invoice_date.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_date' when calling OrderApi.invoice_multiple_orders"
      end
      # resource path
      local_var_path = '/order/:invoiceMultipleOrders'

      # query parameters
      query_params = {}
      query_params[:'id'] = id
      query_params[:'invoiceDate'] = invoice_date

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperInvoice')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#invoice_multiple_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create order.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Order] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperOrder]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # Create order.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Order] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperOrder, Fixnum, Hash)>] ResponseWrapperOrder data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.post ...'
      end
      # resource path
      local_var_path = '/order'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create multiple Orders with OrderLines. Max 100 at a time.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Order>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [ListResponseOrder]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # [BETA] Create multiple Orders with OrderLines. Max 100 at a time.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Order>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [Array<(ListResponseOrder, Fixnum, Hash)>] ListResponseOrder data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.post_list ...'
      end
      # resource path
      local_var_path = '/order/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update order.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Order] :body Partial object describing what should be updated
    # @return [ResponseWrapperOrder]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # Update order.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Order] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperOrder, Fixnum, Hash)>] ResponseWrapperOrder data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.put"
      end
      # resource path
      local_var_path = '/order/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find orders corresponding with sent data.
    # 
    # @param order_date_from From and including
    # @param order_date_to To and excluding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :number Equals
    # @option opts [String] :customer_id List of IDs
    # @option opts [BOOLEAN] :is_closed Equals
    # @option opts [BOOLEAN] :is_subscription Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseOrder]
    def search(order_date_from, order_date_to, opts = {})
      data, _status_code, _headers = search_with_http_info(order_date_from, order_date_to, opts)
      data
    end

    # Find orders corresponding with sent data.
    # 
    # @param order_date_from From and including
    # @param order_date_to To and excluding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :number Equals
    # @option opts [String] :customer_id List of IDs
    # @option opts [BOOLEAN] :is_closed Equals
    # @option opts [BOOLEAN] :is_subscription Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseOrder, Fixnum, Hash)>] ListResponseOrder data, response status code and response headers
    def search_with_http_info(order_date_from, order_date_to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.search ...'
      end
      # verify the required parameter 'order_date_from' is set
      if @api_client.config.client_side_validation && order_date_from.nil?
        fail ArgumentError, "Missing the required parameter 'order_date_from' when calling OrderApi.search"
      end
      # verify the required parameter 'order_date_to' is set
      if @api_client.config.client_side_validation && order_date_to.nil?
        fail ArgumentError, "Missing the required parameter 'order_date_to' when calling OrderApi.search"
      end
      # resource path
      local_var_path = '/order'

      # query parameters
      query_params = {}
      query_params[:'orderDateFrom'] = order_date_from
      query_params[:'orderDateTo'] = order_date_to
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'isClosed'] = opts[:'is_closed'] if !opts[:'is_closed'].nil?
      query_params[:'isSubscription'] = opts[:'is_subscription'] if !opts[:'is_subscription'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unapproves the order for subscription invoicing.
    # 
    # @param id ID of order to unapprove for subscription invoicing.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def un_approve_subscription_invoice(id, opts = {})
      un_approve_subscription_invoice_with_http_info(id, opts)
      nil
    end

    # Unapproves the order for subscription invoicing.
    # 
    # @param id ID of order to unapprove for subscription invoicing.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def un_approve_subscription_invoice_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.un_approve_subscription_invoice ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.un_approve_subscription_invoice"
      end
      # resource path
      local_var_path = '/order/{id}/:unApproveSubscriptionInvoice'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#un_approve_subscription_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
