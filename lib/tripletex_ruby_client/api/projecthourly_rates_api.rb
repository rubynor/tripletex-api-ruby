=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class ProjecthourlyRatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete Project Hourly Rate 
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # Delete Project Hourly Rate 
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjecthourlyRatesApi.delete"
      end
      # resource path
      local_var_path = '/project/hourlyRates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project hourly rates.
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_by_ids(ids, opts = {})
      delete_by_ids_with_http_info(ids, opts)
      nil
    end

    # Delete project hourly rates.
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_by_ids_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.delete_by_ids ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ProjecthourlyRatesApi.delete_by_ids"
      end
      # resource path
      local_var_path = '/project/hourlyRates/list'

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#delete_by_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete project hourly rates by project id.
    # 
    # @param ids ID of the elements
    # @param date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @return [ListResponseProject]
    def delete_by_project_ids(ids, date, opts = {})
      data, _status_code, _headers = delete_by_project_ids_with_http_info(ids, date, opts)
      data
    end

    # Delete project hourly rates by project id.
    # 
    # @param ids ID of the elements
    # @param date yyyy-MM-dd. Defaults to today.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListResponseProject, Fixnum, Hash)>] ListResponseProject data, response status code and response headers
    def delete_by_project_ids_with_http_info(ids, date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.delete_by_project_ids ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ProjecthourlyRatesApi.delete_by_project_ids"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling ProjecthourlyRatesApi.delete_by_project_ids"
      end
      # resource path
      local_var_path = '/project/hourlyRates/deleteByProjectIds'

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids
      query_params[:'date'] = date

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#delete_by_project_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find project hourly rate by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperProjectHourlyRate]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Find project hourly rate by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperProjectHourlyRate, Fixnum, Hash)>] ResponseWrapperProjectHourlyRate data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjecthourlyRatesApi.get"
      end
      # resource path
      local_var_path = '/project/hourlyRates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a project hourly rate. 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectHourlyRate] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperProjectHourlyRate]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # Create a project hourly rate. 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectHourlyRate] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperProjectHourlyRate, Fixnum, Hash)>] ResponseWrapperProjectHourlyRate data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.post ...'
      end
      # resource path
      local_var_path = '/project/hourlyRates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create multiple project hourly rates.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ProjectHourlyRate>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [ListResponseProjectHourlyRate]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # Create multiple project hourly rates.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ProjectHourlyRate>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [Array<(ListResponseProjectHourlyRate, Fixnum, Hash)>] ListResponseProjectHourlyRate data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.post_list ...'
      end
      # resource path
      local_var_path = '/project/hourlyRates/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a project hourly rate.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectHourlyRate] :body Partial object describing what should be updated
    # @return [ResponseWrapperProjectHourlyRate]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # Update a project hourly rate.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [ProjectHourlyRate] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperProjectHourlyRate, Fixnum, Hash)>] ResponseWrapperProjectHourlyRate data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProjecthourlyRatesApi.put"
      end
      # resource path
      local_var_path = '/project/hourlyRates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update multiple project hourly rates.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ProjectHourlyRate>] :body JSON representing updates to object. Should have ID and version set.
    # @return [ListResponseProjectHourlyRate]
    def put_list(opts = {})
      data, _status_code, _headers = put_list_with_http_info(opts)
      data
    end

    # Update multiple project hourly rates.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ProjectHourlyRate>] :body JSON representing updates to object. Should have ID and version set.
    # @return [Array<(ListResponseProjectHourlyRate, Fixnum, Hash)>] ListResponseProjectHourlyRate data, response status code and response headers
    def put_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.put_list ...'
      end
      # resource path
      local_var_path = '/project/hourlyRates/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#put_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find project hourly rates corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :project_id List of IDs
    # @option opts [String] :type Equals
    # @option opts [String] :start_date_from From and including
    # @option opts [String] :start_date_to To and excluding
    # @option opts [BOOLEAN] :show_in_project_order Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseProjectHourlyRate]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find project hourly rates corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :project_id List of IDs
    # @option opts [String] :type Equals
    # @option opts [String] :start_date_from From and including
    # @option opts [String] :start_date_to To and excluding
    # @option opts [BOOLEAN] :show_in_project_order Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseProjectHourlyRate, Fixnum, Hash)>] ListResponseProjectHourlyRate data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['TYPE_PREDEFINED_HOURLY_RATES', 'TYPE_PROJECT_SPECIFIC_HOURLY_RATES', 'TYPE_FIXED_HOURLY_RATE'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of TYPE_PREDEFINED_HOURLY_RATES, TYPE_PROJECT_SPECIFIC_HOURLY_RATES, TYPE_FIXED_HOURLY_RATE'
      end
      # resource path
      local_var_path = '/project/hourlyRates'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'startDateFrom'] = opts[:'start_date_from'] if !opts[:'start_date_from'].nil?
      query_params[:'startDateTo'] = opts[:'start_date_to'] if !opts[:'start_date_to'].nil?
      query_params[:'showInProjectOrder'] = opts[:'show_in_project_order'] if !opts[:'show_in_project_order'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update or add the same project hourly rate from project overview.
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @option opts [HourlyRate] :body JSON representing updates to object. Should have ID and version set.
    # @return [ListResponseProjectHourlyRate]
    def update_or_add_hour_rates(ids, opts = {})
      data, _status_code, _headers = update_or_add_hour_rates_with_http_info(ids, opts)
      data
    end

    # Update or add the same project hourly rate from project overview.
    # 
    # @param ids ID of the elements
    # @param [Hash] opts the optional parameters
    # @option opts [HourlyRate] :body JSON representing updates to object. Should have ID and version set.
    # @return [Array<(ListResponseProjectHourlyRate, Fixnum, Hash)>] ListResponseProjectHourlyRate data, response status code and response headers
    def update_or_add_hour_rates_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjecthourlyRatesApi.update_or_add_hour_rates ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling ProjecthourlyRatesApi.update_or_add_hour_rates"
      end
      # resource path
      local_var_path = '/project/hourlyRates/updateOrAddHourRates'

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseProjectHourlyRate')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjecthourlyRatesApi#update_or_add_hour_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
