=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class ProductUnitMaster
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :name

    attr_accessor :name_short

    attr_accessor :common_code

    attr_accessor :peppol_name

    attr_accessor :peppol_symbol

    attr_accessor :is_inactive

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'name' => :'name',
        :'name_short' => :'nameShort',
        :'common_code' => :'commonCode',
        :'peppol_name' => :'peppolName',
        :'peppol_symbol' => :'peppolSymbol',
        :'is_inactive' => :'isInactive'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'name' => :'String',
        :'name_short' => :'String',
        :'common_code' => :'String',
        :'peppol_name' => :'String',
        :'peppol_symbol' => :'String',
        :'is_inactive' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'nameShort')
        self.name_short = attributes[:'nameShort']
      end

      if attributes.has_key?(:'commonCode')
        self.common_code = attributes[:'commonCode']
      end

      if attributes.has_key?(:'peppolName')
        self.peppol_name = attributes[:'peppolName']
      end

      if attributes.has_key?(:'peppolSymbol')
        self.peppol_symbol = attributes[:'peppolSymbol']
      end

      if attributes.has_key?(:'isInactive')
        self.is_inactive = attributes[:'isInactive']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 100
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 100.')
      end

      if !@name_short.nil? && @name_short.to_s.length > 50
        invalid_properties.push('invalid value for "name_short", the character length must be smaller than or equal to 50.')
      end

      if !@common_code.nil? && @common_code.to_s.length > 50
        invalid_properties.push('invalid value for "common_code", the character length must be smaller than or equal to 50.')
      end

      if !@peppol_name.nil? && @peppol_name.to_s.length > 100
        invalid_properties.push('invalid value for "peppol_name", the character length must be smaller than or equal to 100.')
      end

      if !@peppol_symbol.nil? && @peppol_symbol.to_s.length > 100
        invalid_properties.push('invalid value for "peppol_symbol", the character length must be smaller than or equal to 100.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 100
      return false if !@name_short.nil? && @name_short.to_s.length > 50
      return false if !@common_code.nil? && @common_code.to_s.length > 50
      return false if !@peppol_name.nil? && @peppol_name.to_s.length > 100
      return false if !@peppol_symbol.nil? && @peppol_symbol.to_s.length > 100
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 100
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 100.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_short Value to be assigned
    def name_short=(name_short)
      if !name_short.nil? && name_short.to_s.length > 50
        fail ArgumentError, 'invalid value for "name_short", the character length must be smaller than or equal to 50.'
      end

      @name_short = name_short
    end

    # Custom attribute writer method with validation
    # @param [Object] common_code Value to be assigned
    def common_code=(common_code)
      if !common_code.nil? && common_code.to_s.length > 50
        fail ArgumentError, 'invalid value for "common_code", the character length must be smaller than or equal to 50.'
      end

      @common_code = common_code
    end

    # Custom attribute writer method with validation
    # @param [Object] peppol_name Value to be assigned
    def peppol_name=(peppol_name)
      if !peppol_name.nil? && peppol_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "peppol_name", the character length must be smaller than or equal to 100.'
      end

      @peppol_name = peppol_name
    end

    # Custom attribute writer method with validation
    # @param [Object] peppol_symbol Value to be assigned
    def peppol_symbol=(peppol_symbol)
      if !peppol_symbol.nil? && peppol_symbol.to_s.length > 100
        fail ArgumentError, 'invalid value for "peppol_symbol", the character length must be smaller than or equal to 100.'
      end

      @peppol_symbol = peppol_symbol
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          name == o.name &&
          name_short == o.name_short &&
          common_code == o.common_code &&
          peppol_name == o.peppol_name &&
          peppol_symbol == o.peppol_symbol &&
          is_inactive == o.is_inactive
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, name, name_short, common_code, peppol_name, peppol_symbol, is_inactive].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
