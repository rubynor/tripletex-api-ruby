=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class ProjectInvoiceDetails
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    # The Project related to the Invoice and ProjectInvoiceAdditionalInfo.
    attr_accessor :project

    # Fee amount of the project. For example: 100 NOK.
    attr_accessor :fee_amount

    # Fee amount of the project in the invoice currency.
    attr_accessor :fee_amount_currency

    # The percentage value of mark-up of amountFee. For example: 10%.
    attr_accessor :markup_percent

    # The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.
    attr_accessor :markup_amount

    # The amount value of mark-up of amountFee on the project invoice, in the invoice currency.
    attr_accessor :markup_amount_currency

    # The amount of chargeable manual order lines and vendor invoices on the project invoice.
    attr_accessor :amount_order_lines_and_reinvoicing

    # The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.
    attr_accessor :amount_order_lines_and_reinvoicing_currency

    # The amount of travel costs and expenses on the project invoice.
    attr_accessor :amount_travel_reports_and_expenses

    # The amount of travel costs and expenses on the project invoice, in the invoice currency.
    attr_accessor :amount_travel_reports_and_expenses_currency

    # The fee comment on the project invoice.
    attr_accessor :fee_invoice_text

    # The comment on the project invoice.
    attr_accessor :invoice_text

    # Determines if extra costs should be included on the project invoice.
    attr_accessor :include_order_lines_and_reinvoicing

    # Determines if hours should be included on the project invoice.
    attr_accessor :include_hours

    # Determines if akonto should be included on the project invoice.
    attr_accessor :include_on_account_balance

    # The akonto amount on the project invoice.
    attr_accessor :on_account_balance_amount

    # The akonto amount on the project invoice in the invoice currency.
    attr_accessor :on_account_balance_amount_currency

    # The VAT type of the project invoice.
    attr_accessor :vat_type

    attr_accessor :invoice

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'project' => :'project',
        :'fee_amount' => :'feeAmount',
        :'fee_amount_currency' => :'feeAmountCurrency',
        :'markup_percent' => :'markupPercent',
        :'markup_amount' => :'markupAmount',
        :'markup_amount_currency' => :'markupAmountCurrency',
        :'amount_order_lines_and_reinvoicing' => :'amountOrderLinesAndReinvoicing',
        :'amount_order_lines_and_reinvoicing_currency' => :'amountOrderLinesAndReinvoicingCurrency',
        :'amount_travel_reports_and_expenses' => :'amountTravelReportsAndExpenses',
        :'amount_travel_reports_and_expenses_currency' => :'amountTravelReportsAndExpensesCurrency',
        :'fee_invoice_text' => :'feeInvoiceText',
        :'invoice_text' => :'invoiceText',
        :'include_order_lines_and_reinvoicing' => :'includeOrderLinesAndReinvoicing',
        :'include_hours' => :'includeHours',
        :'include_on_account_balance' => :'includeOnAccountBalance',
        :'on_account_balance_amount' => :'onAccountBalanceAmount',
        :'on_account_balance_amount_currency' => :'onAccountBalanceAmountCurrency',
        :'vat_type' => :'vatType',
        :'invoice' => :'invoice'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'project' => :'Project',
        :'fee_amount' => :'Float',
        :'fee_amount_currency' => :'Float',
        :'markup_percent' => :'Float',
        :'markup_amount' => :'Float',
        :'markup_amount_currency' => :'Float',
        :'amount_order_lines_and_reinvoicing' => :'Float',
        :'amount_order_lines_and_reinvoicing_currency' => :'Float',
        :'amount_travel_reports_and_expenses' => :'Float',
        :'amount_travel_reports_and_expenses_currency' => :'Float',
        :'fee_invoice_text' => :'String',
        :'invoice_text' => :'String',
        :'include_order_lines_and_reinvoicing' => :'BOOLEAN',
        :'include_hours' => :'BOOLEAN',
        :'include_on_account_balance' => :'BOOLEAN',
        :'on_account_balance_amount' => :'Float',
        :'on_account_balance_amount_currency' => :'Float',
        :'vat_type' => :'VatType',
        :'invoice' => :'Invoice'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.has_key?(:'feeAmount')
        self.fee_amount = attributes[:'feeAmount']
      end

      if attributes.has_key?(:'feeAmountCurrency')
        self.fee_amount_currency = attributes[:'feeAmountCurrency']
      end

      if attributes.has_key?(:'markupPercent')
        self.markup_percent = attributes[:'markupPercent']
      end

      if attributes.has_key?(:'markupAmount')
        self.markup_amount = attributes[:'markupAmount']
      end

      if attributes.has_key?(:'markupAmountCurrency')
        self.markup_amount_currency = attributes[:'markupAmountCurrency']
      end

      if attributes.has_key?(:'amountOrderLinesAndReinvoicing')
        self.amount_order_lines_and_reinvoicing = attributes[:'amountOrderLinesAndReinvoicing']
      end

      if attributes.has_key?(:'amountOrderLinesAndReinvoicingCurrency')
        self.amount_order_lines_and_reinvoicing_currency = attributes[:'amountOrderLinesAndReinvoicingCurrency']
      end

      if attributes.has_key?(:'amountTravelReportsAndExpenses')
        self.amount_travel_reports_and_expenses = attributes[:'amountTravelReportsAndExpenses']
      end

      if attributes.has_key?(:'amountTravelReportsAndExpensesCurrency')
        self.amount_travel_reports_and_expenses_currency = attributes[:'amountTravelReportsAndExpensesCurrency']
      end

      if attributes.has_key?(:'feeInvoiceText')
        self.fee_invoice_text = attributes[:'feeInvoiceText']
      end

      if attributes.has_key?(:'invoiceText')
        self.invoice_text = attributes[:'invoiceText']
      end

      if attributes.has_key?(:'includeOrderLinesAndReinvoicing')
        self.include_order_lines_and_reinvoicing = attributes[:'includeOrderLinesAndReinvoicing']
      end

      if attributes.has_key?(:'includeHours')
        self.include_hours = attributes[:'includeHours']
      end

      if attributes.has_key?(:'includeOnAccountBalance')
        self.include_on_account_balance = attributes[:'includeOnAccountBalance']
      end

      if attributes.has_key?(:'onAccountBalanceAmount')
        self.on_account_balance_amount = attributes[:'onAccountBalanceAmount']
      end

      if attributes.has_key?(:'onAccountBalanceAmountCurrency')
        self.on_account_balance_amount_currency = attributes[:'onAccountBalanceAmountCurrency']
      end

      if attributes.has_key?(:'vatType')
        self.vat_type = attributes[:'vatType']
      end

      if attributes.has_key?(:'invoice')
        self.invoice = attributes[:'invoice']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          project == o.project &&
          fee_amount == o.fee_amount &&
          fee_amount_currency == o.fee_amount_currency &&
          markup_percent == o.markup_percent &&
          markup_amount == o.markup_amount &&
          markup_amount_currency == o.markup_amount_currency &&
          amount_order_lines_and_reinvoicing == o.amount_order_lines_and_reinvoicing &&
          amount_order_lines_and_reinvoicing_currency == o.amount_order_lines_and_reinvoicing_currency &&
          amount_travel_reports_and_expenses == o.amount_travel_reports_and_expenses &&
          amount_travel_reports_and_expenses_currency == o.amount_travel_reports_and_expenses_currency &&
          fee_invoice_text == o.fee_invoice_text &&
          invoice_text == o.invoice_text &&
          include_order_lines_and_reinvoicing == o.include_order_lines_and_reinvoicing &&
          include_hours == o.include_hours &&
          include_on_account_balance == o.include_on_account_balance &&
          on_account_balance_amount == o.on_account_balance_amount &&
          on_account_balance_amount_currency == o.on_account_balance_amount_currency &&
          vat_type == o.vat_type &&
          invoice == o.invoice
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, project, fee_amount, fee_amount_currency, markup_percent, markup_amount, markup_amount_currency, amount_order_lines_and_reinvoicing, amount_order_lines_and_reinvoicing_currency, amount_travel_reports_and_expenses, amount_travel_reports_and_expenses_currency, fee_invoice_text, invoice_text, include_order_lines_and_reinvoicing, include_hours, include_on_account_balance, on_account_balance_amount, on_account_balance_amount_currency, vat_type, invoice].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
