=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class PerDiemCompensationTransientDTO
    attr_accessor :travel_expense

    attr_accessor :rate_type

    attr_accessor :rate_category

    attr_accessor :country_code

    attr_accessor :travel_expense_zone_id

    attr_accessor :overnight_accommodation

    attr_accessor :location

    attr_accessor :address

    attr_accessor :count

    attr_accessor :rate

    attr_accessor :amount

    attr_accessor :is_deduction_for_breakfast

    attr_accessor :is_deduction_for_lunch

    attr_accessor :is_deduction_for_dinner

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'travel_expense' => :'travelExpense',
        :'rate_type' => :'rateType',
        :'rate_category' => :'rateCategory',
        :'country_code' => :'countryCode',
        :'travel_expense_zone_id' => :'travelExpenseZoneId',
        :'overnight_accommodation' => :'overnightAccommodation',
        :'location' => :'location',
        :'address' => :'address',
        :'count' => :'count',
        :'rate' => :'rate',
        :'amount' => :'amount',
        :'is_deduction_for_breakfast' => :'isDeductionForBreakfast',
        :'is_deduction_for_lunch' => :'isDeductionForLunch',
        :'is_deduction_for_dinner' => :'isDeductionForDinner'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'travel_expense' => :'TravelExpense',
        :'rate_type' => :'TravelExpenseRate',
        :'rate_category' => :'TravelExpenseRateCategory',
        :'country_code' => :'String',
        :'travel_expense_zone_id' => :'Integer',
        :'overnight_accommodation' => :'String',
        :'location' => :'String',
        :'address' => :'String',
        :'count' => :'Integer',
        :'rate' => :'Float',
        :'amount' => :'Float',
        :'is_deduction_for_breakfast' => :'BOOLEAN',
        :'is_deduction_for_lunch' => :'BOOLEAN',
        :'is_deduction_for_dinner' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'travelExpense')
        self.travel_expense = attributes[:'travelExpense']
      end

      if attributes.has_key?(:'rateType')
        self.rate_type = attributes[:'rateType']
      end

      if attributes.has_key?(:'rateCategory')
        self.rate_category = attributes[:'rateCategory']
      end

      if attributes.has_key?(:'countryCode')
        self.country_code = attributes[:'countryCode']
      end

      if attributes.has_key?(:'travelExpenseZoneId')
        self.travel_expense_zone_id = attributes[:'travelExpenseZoneId']
      end

      if attributes.has_key?(:'overnightAccommodation')
        self.overnight_accommodation = attributes[:'overnightAccommodation']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'isDeductionForBreakfast')
        self.is_deduction_for_breakfast = attributes[:'isDeductionForBreakfast']
      end

      if attributes.has_key?(:'isDeductionForLunch')
        self.is_deduction_for_lunch = attributes[:'isDeductionForLunch']
      end

      if attributes.has_key?(:'isDeductionForDinner')
        self.is_deduction_for_dinner = attributes[:'isDeductionForDinner']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      overnight_accommodation_validator = EnumAttributeValidator.new('String', ['NONE', 'HOTEL', 'BOARDING_HOUSE_WITHOUT_COOKING', 'BOARDING_HOUSE_WITH_COOKING'])
      return false unless overnight_accommodation_validator.valid?(@overnight_accommodation)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] overnight_accommodation Object to be assigned
    def overnight_accommodation=(overnight_accommodation)
      validator = EnumAttributeValidator.new('String', ['NONE', 'HOTEL', 'BOARDING_HOUSE_WITHOUT_COOKING', 'BOARDING_HOUSE_WITH_COOKING'])
      unless validator.valid?(overnight_accommodation)
        fail ArgumentError, 'invalid value for "overnight_accommodation", must be one of #{validator.allowable_values}.'
      end
      @overnight_accommodation = overnight_accommodation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          travel_expense == o.travel_expense &&
          rate_type == o.rate_type &&
          rate_category == o.rate_category &&
          country_code == o.country_code &&
          travel_expense_zone_id == o.travel_expense_zone_id &&
          overnight_accommodation == o.overnight_accommodation &&
          location == o.location &&
          address == o.address &&
          count == o.count &&
          rate == o.rate &&
          amount == o.amount &&
          is_deduction_for_breakfast == o.is_deduction_for_breakfast &&
          is_deduction_for_lunch == o.is_deduction_for_lunch &&
          is_deduction_for_dinner == o.is_deduction_for_dinner
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [travel_expense, rate_type, rate_category, country_code, travel_expense_zone_id, overnight_accommodation, location, address, count, rate, amount, is_deduction_for_breakfast, is_deduction_for_lunch, is_deduction_for_dinner].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
