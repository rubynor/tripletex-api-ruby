=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::OrderApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'OrderApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::OrderApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of OrderApi' do
    it 'should create an instance of OrderApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::OrderApi)
    end
  end

  # unit tests for approve_subscription_invoice
  # To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.
  # 
  # @param id ID of order to approve for subscription invoicing.
  # @param invoice_date The approval date for the subscription.
  # @param [Hash] opts the optional parameters
  # @return [ResponseWrapperInvoice]
  describe 'approve_subscription_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for attach
  # Attach document to specified order ID.
  # 
  # @param file The file
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @return [ResponseWrapperDocumentArchive]
  describe 'attach test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Get order by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperOrder]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invoice
  # Create new invoice from order.
  # 
  # @param id ID of order to invoice.
  # @param invoice_date The invoice date
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :send_to_customer Send invoice to customer
  # @option opts [Integer] :payment_type_id Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.
  # @option opts [Float] :paid_amount Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.
  # @option opts [Float] :paid_amount_account_currency Amount paid in payment type currency
  # @option opts [Integer] :payment_type_id_rest_amount Payment type of rest amount. It is possible to have two prepaid payments when invoicing. If paymentTypeIdRestAmount &gt; 0, this second payment will be calculated as invoice amount - paidAmount
  # @option opts [Float] :paid_amount_account_currency_rest Amount rest in payment type currency
  # @option opts [String] :create_on_account Create on account(a konto)
  # @option opts [Float] :amount_on_account Amount on account
  # @option opts [String] :on_account_comment On account comment
  # @option opts [BOOLEAN] :create_backorder Create a backorder for this order, available only for pilot users
  # @return [ResponseWrapperInvoice]
  describe 'invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invoice_multiple_orders
  # [BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.
  # 
  # @param id List of Order IDs - to the same customer, separated by comma.
  # @param invoice_date The invoice date
  # @param [Hash] opts the optional parameters
  # @return [ResponseWrapperInvoice]
  describe 'invoice_multiple_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post
  # Create order.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Order] :body JSON representing the new object to be created. Should not have ID and version set.
  # @return [ResponseWrapperOrder]
  describe 'post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list
  # [BETA] Create multiple Orders with OrderLines. Max 100 at a time.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Order>] :body JSON representing a list of new object to be created. Should not have ID and version set.
  # @return [ListResponseOrder]
  describe 'post_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put
  # Update order.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [Order] :body Partial object describing what should be updated
  # @return [ResponseWrapperOrder]
  describe 'put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Find orders corresponding with sent data.
  # 
  # @param order_date_from From and including
  # @param order_date_to To and excluding
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id List of IDs
  # @option opts [String] :number Equals
  # @option opts [String] :customer_id List of IDs
  # @option opts [BOOLEAN] :is_closed Equals
  # @option opts [BOOLEAN] :is_subscription Equals
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseOrder]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for un_approve_subscription_invoice
  # Unapproves the order for subscription invoicing.
  # 
  # @param id ID of order to unapprove for subscription invoicing.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'un_approve_subscription_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
