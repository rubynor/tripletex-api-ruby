=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::LedgervoucherApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LedgervoucherApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::LedgervoucherApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LedgervoucherApi' do
    it 'should create an instance of LedgervoucherApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::LedgervoucherApi)
    end
  end

  # unit tests for delete
  # [BETA] Delete voucher by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_attachment
  # [BETA] Delete attachment.
  # 
  # @param voucher_id ID of voucher containing the attachment to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :version Version of voucher containing the attachment to delete.
  # @option opts [BOOLEAN] :send_to_inbox Should the attachment be sent to inbox rather than deleted?
  # @option opts [BOOLEAN] :split If sendToInbox is true, should the attachment be split into one voucher per page?
  # @return [nil]
  describe 'delete_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_pdf
  # Get PDF representation of voucher by ID.
  # 
  # @param voucher_id Voucher ID from which PDF is downloaded.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'download_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for external_voucher_number
  # [BETA] Find vouchers based on the external voucher number.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :external_voucher_number The external voucher number, when voucher is created from import.
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseVoucher]
  describe 'external_voucher_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Get voucher by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperVoucher]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_document
  # [BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.
  # 
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description Optional description to use for the voucher(s). If omitted the file name will be used.
  # @option opts [BOOLEAN] :split If the document consists of several pages, should the document be split into one voucher per page?
  # @return [ListResponseVoucher]
  describe 'import_document test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_gbat10
  # Import GBAT10. Send as multipart form.
  # 
  # @param generate_vat_postings If the import should generate VAT postings
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :encoding The file encoding
  # @return [nil]
  describe 'import_gbat10 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for non_posted
  # [BETA] Find non-posted vouchers.
  # 
  # @param include_non_approved Include non-approved vouchers in the result.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_from From and including
  # @option opts [String] :date_to To and excluding
  # @option opts [String] :changed_since Only return elements that have changed since this date and time
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseVoucher]
  describe 'non_posted test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for options
  # [BETA] Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperVoucherOptions]
  describe 'options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post
  # Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :send_to_ledger Should the voucher be sent to ledger? Requires the \&quot;Advanced Voucher\&quot; permission.
  # @option opts [Voucher] :body JSON representing the new object to be created. Should not have ID and version set.
  # @return [ResponseWrapperVoucher]
  describe 'post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put
  # [BETA] Update voucher. Postings with guiRow&#x3D;&#x3D;0 will be deleted and regenerated.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :send_to_ledger Should the voucher be sent to ledger? Requires the \&quot;Advanced Voucher\&quot; permission.
  # @option opts [Voucher] :body Partial object describing what should be updated
  # @return [ResponseWrapperVoucher]
  describe 'put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put_list
  # [BETA] Update multiple vouchers. Postings with guiRow&#x3D;&#x3D;0 will be deleted and regenerated.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :send_to_ledger Should the voucher be sent to ledger? Requires the \&quot;Advanced Voucher\&quot; permission.
  # @option opts [Array<Voucher>] :body JSON representing updates to object. Should have ID and version set.
  # @return [ListResponseVoucher]
  describe 'put_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reverse
  # Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.
  # 
  # @param id ID of voucher that should be reversed.
  # @param date Reverse voucher date
  # @param [Hash] opts the optional parameters
  # @return [ResponseWrapperVoucher]
  describe 'reverse test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Find vouchers corresponding with sent data.
  # 
  # @param date_from From and including
  # @param date_to To and excluding
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id List of IDs
  # @option opts [String] :number List of IDs
  # @option opts [Integer] :number_from From and including
  # @option opts [Integer] :number_to To and excluding
  # @option opts [String] :type_id List of IDs
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [VoucherSearchResponse]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_to_inbox
  # [BETA] Send voucher to inbox.
  # 
  # @param id ID of voucher that should be sent to inbox.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :version Version of voucher that should be sent to inbox.
  # @option opts [String] :comment Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.
  # @return [ResponseWrapperVoucher]
  describe 'send_to_inbox test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send_to_ledger
  # [BETA] Send voucher to ledger.
  # 
  # @param id ID of voucher that should be sent to ledger.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :version Version of voucher that should be sent to ledger.
  # @option opts [Integer] :number Voucher number to use. If omitted or 0 the system will assign the number.
  # @return [ResponseWrapperVoucher]
  describe 'send_to_ledger test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_attachment
  # Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.
  # 
  # @param voucher_id Voucher ID to upload attachment to.
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_pdf
  # [DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.
  # 
  # @param voucher_id Voucher ID to upload PDF to.
  # @param file_name File name to store the pdf under. Will not be the same as the filename on the file returned.
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for voucher_reception
  # Find vouchers in voucher reception.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_from From and including
  # @option opts [String] :date_to To and excluding
  # @option opts [String] :search_text Search
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseVoucher]
  describe 'voucher_reception test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
