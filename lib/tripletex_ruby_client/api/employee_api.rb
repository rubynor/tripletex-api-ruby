=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class EmployeeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get employee by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperEmployee]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Get employee by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperEmployee, Fixnum, Hash)>] ResponseWrapperEmployee data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.get"
      end
      # resource path
      local_var_path = '/employee/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperEmployee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create one employee.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperEmployee]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # [BETA] Create one employee.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperEmployee, Fixnum, Hash)>] ResponseWrapperEmployee data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.post ...'
      end
      # resource path
      local_var_path = '/employee'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperEmployee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create several employees.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Employee>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [ListResponseEmployee]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # [BETA] Create several employees.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Employee>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [Array<(ListResponseEmployee, Fixnum, Hash)>] ListResponseEmployee data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.post_list ...'
      end
      # resource path
      local_var_path = '/employee/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseEmployee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update employee.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body Partial object describing what should be updated
    # @return [ResponseWrapperEmployee]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # Update employee.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [Employee] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperEmployee, Fixnum, Hash)>] ResponseWrapperEmployee data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeApi.put"
      end
      # resource path
      local_var_path = '/employee/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperEmployee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find employees corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :first_name Containing
    # @option opts [String] :last_name Containing
    # @option opts [String] :employee_number Containing
    # @option opts [BOOLEAN] :allow_information_registration Equals
    # @option opts [BOOLEAN] :include_contacts Equals (default to false)
    # @option opts [String] :department_id List of IDs
    # @option opts [BOOLEAN] :only_project_managers Equals
    # @option opts [BOOLEAN] :only_contacts Equals (default to false)
    # @option opts [BOOLEAN] :assignable_project_managers Equals
    # @option opts [String] :period_start Equals
    # @option opts [String] :period_end Equals
    # @option opts [BOOLEAN] :has_system_access Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseEmployee]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find employees corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :first_name Containing
    # @option opts [String] :last_name Containing
    # @option opts [String] :employee_number Containing
    # @option opts [BOOLEAN] :allow_information_registration Equals
    # @option opts [BOOLEAN] :include_contacts Equals
    # @option opts [String] :department_id List of IDs
    # @option opts [BOOLEAN] :only_project_managers Equals
    # @option opts [BOOLEAN] :only_contacts Equals
    # @option opts [BOOLEAN] :assignable_project_managers Equals
    # @option opts [String] :period_start Equals
    # @option opts [String] :period_end Equals
    # @option opts [BOOLEAN] :has_system_access Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseEmployee, Fixnum, Hash)>] ListResponseEmployee data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeApi.search ...'
      end
      # resource path
      local_var_path = '/employee'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?
      query_params[:'employeeNumber'] = opts[:'employee_number'] if !opts[:'employee_number'].nil?
      query_params[:'allowInformationRegistration'] = opts[:'allow_information_registration'] if !opts[:'allow_information_registration'].nil?
      query_params[:'includeContacts'] = opts[:'include_contacts'] if !opts[:'include_contacts'].nil?
      query_params[:'departmentId'] = opts[:'department_id'] if !opts[:'department_id'].nil?
      query_params[:'onlyProjectManagers'] = opts[:'only_project_managers'] if !opts[:'only_project_managers'].nil?
      query_params[:'onlyContacts'] = opts[:'only_contacts'] if !opts[:'only_contacts'].nil?
      query_params[:'assignableProjectManagers'] = opts[:'assignable_project_managers'] if !opts[:'assignable_project_managers'].nil?
      query_params[:'periodStart'] = opts[:'period_start'] if !opts[:'period_start'].nil?
      query_params[:'periodEnd'] = opts[:'period_end'] if !opts[:'period_end'].nil?
      query_params[:'hasSystemAccess'] = opts[:'has_system_access'] if !opts[:'has_system_access'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseEmployee')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
