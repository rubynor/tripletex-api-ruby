=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class LedgerpostingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Find postings by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperPosting]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Find postings by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperPosting, Fixnum, Hash)>] ResponseWrapperPosting data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpostingApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerpostingApi.get"
      end
      # resource path
      local_var_path = '/ledger/posting/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPosting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpostingApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find open posts corresponding with sent data.
    # 
    # @param date Invoice date. Format is yyyy-MM-dd (to and excl.).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id Element ID
    # @option opts [Integer] :supplier_id Element ID
    # @option opts [Integer] :customer_id Element ID
    # @option opts [Integer] :employee_id Element ID
    # @option opts [Integer] :department_id Element ID
    # @option opts [Integer] :project_id Element ID
    # @option opts [Integer] :product_id Element ID
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponsePosting]
    def open_post(date, opts = {})
      data, _status_code, _headers = open_post_with_http_info(date, opts)
      data
    end

    # Find open posts corresponding with sent data.
    # 
    # @param date Invoice date. Format is yyyy-MM-dd (to and excl.).
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :account_id Element ID
    # @option opts [Integer] :supplier_id Element ID
    # @option opts [Integer] :customer_id Element ID
    # @option opts [Integer] :employee_id Element ID
    # @option opts [Integer] :department_id Element ID
    # @option opts [Integer] :project_id Element ID
    # @option opts [Integer] :product_id Element ID
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponsePosting, Fixnum, Hash)>] ListResponsePosting data, response status code and response headers
    def open_post_with_http_info(date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpostingApi.open_post ...'
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling LedgerpostingApi.open_post"
      end
      # resource path
      local_var_path = '/ledger/posting/openPost'

      # query parameters
      query_params = {}
      query_params[:'date'] = date
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'supplierId'] = opts[:'supplier_id'] if !opts[:'supplier_id'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'departmentId'] = opts[:'department_id'] if !opts[:'department_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'productId'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePosting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpostingApi#open_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find postings corresponding with sent data.
    # 
    # @param date_from Format is yyyy-MM-dd (from and incl.).
    # @param date_to Format is yyyy-MM-dd (to and excl.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :open_postings Deprecated
    # @option opts [Integer] :account_id Element ID
    # @option opts [Integer] :supplier_id Element ID
    # @option opts [Integer] :customer_id Element ID
    # @option opts [Integer] :employee_id Element ID
    # @option opts [Integer] :department_id Element ID
    # @option opts [Integer] :project_id Element ID
    # @option opts [Integer] :product_id Element ID
    # @option opts [String] :type Element ID
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponsePosting]
    def search(date_from, date_to, opts = {})
      data, _status_code, _headers = search_with_http_info(date_from, date_to, opts)
      data
    end

    # Find postings corresponding with sent data.
    # 
    # @param date_from Format is yyyy-MM-dd (from and incl.).
    # @param date_to Format is yyyy-MM-dd (to and excl.).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :open_postings Deprecated
    # @option opts [Integer] :account_id Element ID
    # @option opts [Integer] :supplier_id Element ID
    # @option opts [Integer] :customer_id Element ID
    # @option opts [Integer] :employee_id Element ID
    # @option opts [Integer] :department_id Element ID
    # @option opts [Integer] :project_id Element ID
    # @option opts [Integer] :product_id Element ID
    # @option opts [String] :type Element ID
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponsePosting, Fixnum, Hash)>] ListResponsePosting data, response status code and response headers
    def search_with_http_info(date_from, date_to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpostingApi.search ...'
      end
      # verify the required parameter 'date_from' is set
      if @api_client.config.client_side_validation && date_from.nil?
        fail ArgumentError, "Missing the required parameter 'date_from' when calling LedgerpostingApi.search"
      end
      # verify the required parameter 'date_to' is set
      if @api_client.config.client_side_validation && date_to.nil?
        fail ArgumentError, "Missing the required parameter 'date_to' when calling LedgerpostingApi.search"
      end
      if @api_client.config.client_side_validation && opts[:'type'] && !['INCOMING_PAYMENT', 'INCOMING_PAYMENT_OPPOSITE', 'INVOICE_EXPENSE', 'OUTGOING_INVOICE_CUSTOMER_POSTING'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of INCOMING_PAYMENT, INCOMING_PAYMENT_OPPOSITE, INVOICE_EXPENSE, OUTGOING_INVOICE_CUSTOMER_POSTING'
      end
      # resource path
      local_var_path = '/ledger/posting'

      # query parameters
      query_params = {}
      query_params[:'dateFrom'] = date_from
      query_params[:'dateTo'] = date_to
      query_params[:'openPostings'] = opts[:'open_postings'] if !opts[:'open_postings'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'supplierId'] = opts[:'supplier_id'] if !opts[:'supplier_id'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'departmentId'] = opts[:'department_id'] if !opts[:'department_id'].nil?
      query_params[:'projectId'] = opts[:'project_id'] if !opts[:'project_id'].nil?
      query_params[:'productId'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePosting')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpostingApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
