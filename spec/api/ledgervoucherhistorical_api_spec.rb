=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::LedgervoucherhistoricalApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'LedgervoucherhistoricalApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::LedgervoucherhistoricalApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of LedgervoucherhistoricalApi' do
    it 'should create an instance of LedgervoucherhistoricalApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::LedgervoucherhistoricalApi)
    end
  end

  # unit tests for close_postings
  # [BETA] Close postings.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :posting_ids List of Posting IDs to close separated by comma.  The postings should have the same customer, supplier or employee. The sum of amount for all postings MUST be 0.0, otherwise an exception will be thrown.
  # @return [nil]
  describe 'close_postings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_employee
  # [BETA] Create one employee, based on import from external system. Validation is less strict, ie. employee department isn&#39;t required.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Employee] :body JSON representing the new object to be created. Should not have ID and version set.
  # @return [ResponseWrapperEmployee]
  describe 'post_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_historical
  # [BETA] API endpoint for creating historical vouchers. These are vouchers created outside Tripletex, and should be from closed accounting years. The intended usage is to get access to historical transcations in Tripletex. Also creates postings. All amount fields in postings will be used. VAT postings must be included, these are not generated automatically like they are for normal vouchers in Tripletex. Requires the \\\&quot;All vouchers\\\&quot; and \\\&quot;Advanced Voucher\\\&quot; permissions.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<HistoricalVoucher>] :body List of vouchers and related postings to import. Max 500.  
  # @option opts [String] :comment Import comment, include the name and version of the source system.
  # @return [ListResponseHistoricalVoucher]
  describe 'post_historical test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reverse_historical_vouchers
  # [BETA] Deletes all historical vouchers. Requires the \&quot;All vouchers\&quot; and \&quot;Advanced Voucher\&quot; permissions.
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reverse_historical_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_attachment
  # Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.
  # 
  # @param voucher_id Voucher ID to upload attachment to.
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
