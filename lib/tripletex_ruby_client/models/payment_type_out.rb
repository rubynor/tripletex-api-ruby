=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class PaymentTypeOut
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :description

    # true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting
    attr_accessor :is_brutto_wage_deduction

    attr_accessor :credit_account

    # true if the payment type should be available in supplier invoices
    attr_accessor :show_incoming_invoice

    # true if the payment type should be available in wage payments. The wage module is required to both view and change this setting
    attr_accessor :show_wage_payment

    # true if the payment type should be available in vat returns
    attr_accessor :show_vat_returns

    # true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting
    attr_accessor :show_wage_period_transaction

    # true if a separate voucher is required
    attr_accessor :requires_separate_voucher

    # determines in which order the types should be listed. No 1 is listed first
    attr_accessor :sequence

    # true if the payment type should be hidden from available payment types
    attr_accessor :is_inactive

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'description' => :'description',
        :'is_brutto_wage_deduction' => :'isBruttoWageDeduction',
        :'credit_account' => :'creditAccount',
        :'show_incoming_invoice' => :'showIncomingInvoice',
        :'show_wage_payment' => :'showWagePayment',
        :'show_vat_returns' => :'showVatReturns',
        :'show_wage_period_transaction' => :'showWagePeriodTransaction',
        :'requires_separate_voucher' => :'requiresSeparateVoucher',
        :'sequence' => :'sequence',
        :'is_inactive' => :'isInactive'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'description' => :'String',
        :'is_brutto_wage_deduction' => :'BOOLEAN',
        :'credit_account' => :'Account',
        :'show_incoming_invoice' => :'BOOLEAN',
        :'show_wage_payment' => :'BOOLEAN',
        :'show_vat_returns' => :'BOOLEAN',
        :'show_wage_period_transaction' => :'BOOLEAN',
        :'requires_separate_voucher' => :'BOOLEAN',
        :'sequence' => :'Integer',
        :'is_inactive' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'isBruttoWageDeduction')
        self.is_brutto_wage_deduction = attributes[:'isBruttoWageDeduction']
      end

      if attributes.has_key?(:'creditAccount')
        self.credit_account = attributes[:'creditAccount']
      end

      if attributes.has_key?(:'showIncomingInvoice')
        self.show_incoming_invoice = attributes[:'showIncomingInvoice']
      end

      if attributes.has_key?(:'showWagePayment')
        self.show_wage_payment = attributes[:'showWagePayment']
      end

      if attributes.has_key?(:'showVatReturns')
        self.show_vat_returns = attributes[:'showVatReturns']
      end

      if attributes.has_key?(:'showWagePeriodTransaction')
        self.show_wage_period_transaction = attributes[:'showWagePeriodTransaction']
      end

      if attributes.has_key?(:'requiresSeparateVoucher')
        self.requires_separate_voucher = attributes[:'requiresSeparateVoucher']
      end

      if attributes.has_key?(:'sequence')
        self.sequence = attributes[:'sequence']
      end

      if attributes.has_key?(:'isInactive')
        self.is_inactive = attributes[:'isInactive']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      if @credit_account.nil?
        invalid_properties.push('invalid value for "credit_account", credit_account cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.nil?
      return false if @description.to_s.length > 255
      return false if @credit_account.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.nil?
        fail ArgumentError, 'description cannot be nil'
      end

      if description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      @description = description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          description == o.description &&
          is_brutto_wage_deduction == o.is_brutto_wage_deduction &&
          credit_account == o.credit_account &&
          show_incoming_invoice == o.show_incoming_invoice &&
          show_wage_payment == o.show_wage_payment &&
          show_vat_returns == o.show_vat_returns &&
          show_wage_period_transaction == o.show_wage_period_transaction &&
          requires_separate_voucher == o.requires_separate_voucher &&
          sequence == o.sequence &&
          is_inactive == o.is_inactive
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, description, is_brutto_wage_deduction, credit_account, show_incoming_invoice, show_wage_payment, show_vat_returns, show_wage_period_transaction, requires_separate_voucher, sequence, is_inactive].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
