=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class EmployeeentitlementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Find all entitlements at client for user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :employee_id Employee ID. Defaults to ID of token owner.
    # @option opts [Integer] :customer_id Client ID
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseEntitlement]
    def client(opts = {})
      data, _status_code, _headers = client_with_http_info(opts)
      data
    end

    # [BETA] Find all entitlements at client for user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :employee_id Employee ID. Defaults to ID of token owner.
    # @option opts [Integer] :customer_id Client ID
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseEntitlement, Fixnum, Hash)>] ListResponseEntitlement data, response status code and response headers
    def client_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeentitlementApi.client ...'
      end
      # resource path
      local_var_path = '/employee/entitlement/client'

      # query parameters
      query_params = {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'customerId'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseEntitlement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeentitlementApi#client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get entitlement by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperEntitlement]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # Get entitlement by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperEntitlement, Fixnum, Hash)>] ResponseWrapperEntitlement data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeentitlementApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EmployeeentitlementApi.get"
      end
      # resource path
      local_var_path = '/employee/entitlement/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperEntitlement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeentitlementApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update employee entitlements in client account.
    # 
    # @param employee_id Employee ID
    # @param customer_id Client ID
    # @param template Template
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :add_to_existing Add template to existing entitlements (default to false)
    # @return [nil]
    def grant_client_entitlements_by_template(employee_id, customer_id, template, opts = {})
      grant_client_entitlements_by_template_with_http_info(employee_id, customer_id, template, opts)
      nil
    end

    # [BETA] Update employee entitlements in client account.
    # 
    # @param employee_id Employee ID
    # @param customer_id Client ID
    # @param template Template
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :add_to_existing Add template to existing entitlements
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def grant_client_entitlements_by_template_with_http_info(employee_id, customer_id, template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeentitlementApi.grant_client_entitlements_by_template ...'
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling EmployeeentitlementApi.grant_client_entitlements_by_template"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling EmployeeentitlementApi.grant_client_entitlements_by_template"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling EmployeeentitlementApi.grant_client_entitlements_by_template"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NONE_PRIVILEGES', 'STANDARD_PRIVILEGES_ACCOUNTANT', 'STANDARD_PRIVILEGES_AUDITOR', 'ALL_PRIVILEGES', 'AGRO_READ_ONLY', 'AGRO_READ_APPROVE', 'AGRO_READ_WRITE', 'AGRO_READ_WRITE_APPROVE', 'MAMUT_PAYROLL_ADMIN', 'MAMUT_PAYROLL_CLERK', 'AGRO_PAYROLL_ADMIN', 'AGRO_PAYROLL_CLERK', 'AGRO_INVOICE_ADMIN', 'AGRO_INVOICE_CLERK'].include?(template)
        fail ArgumentError, "invalid value for 'template', must be one of NONE_PRIVILEGES, STANDARD_PRIVILEGES_ACCOUNTANT, STANDARD_PRIVILEGES_AUDITOR, ALL_PRIVILEGES, AGRO_READ_ONLY, AGRO_READ_APPROVE, AGRO_READ_WRITE, AGRO_READ_WRITE_APPROVE, MAMUT_PAYROLL_ADMIN, MAMUT_PAYROLL_CLERK, AGRO_PAYROLL_ADMIN, AGRO_PAYROLL_CLERK, AGRO_INVOICE_ADMIN, AGRO_INVOICE_CLERK"
      end
      # resource path
      local_var_path = '/employee/entitlement/:grantClientEntitlementsByTemplate'

      # query parameters
      query_params = {}
      query_params[:'employeeId'] = employee_id
      query_params[:'customerId'] = customer_id
      query_params[:'template'] = template
      query_params[:'addToExisting'] = opts[:'add_to_existing'] if !opts[:'add_to_existing'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeentitlementApi#grant_client_entitlements_by_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update employee entitlements.
    # The user will only receive the entitlements which are possible with the registered user type
    # @param employee_id Employee ID
    # @param template Template
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def grant_entitlements_by_template(employee_id, template, opts = {})
      grant_entitlements_by_template_with_http_info(employee_id, template, opts)
      nil
    end

    # [BETA] Update employee entitlements.
    # The user will only receive the entitlements which are possible with the registered user type
    # @param employee_id Employee ID
    # @param template Template
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def grant_entitlements_by_template_with_http_info(employee_id, template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeentitlementApi.grant_entitlements_by_template ...'
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling EmployeeentitlementApi.grant_entitlements_by_template"
      end
      # verify the required parameter 'template' is set
      if @api_client.config.client_side_validation && template.nil?
        fail ArgumentError, "Missing the required parameter 'template' when calling EmployeeentitlementApi.grant_entitlements_by_template"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NONE_PRIVILEGES', 'ALL_PRIVILEGES', 'INVOICING_MANAGER', 'PERSONELL_MANAGER', 'ACCOUNTANT', 'AUDITOR', 'DEPARTMENT_LEADER', 'MAMUT_USER_ADMIN', 'MAMUT_USER'].include?(template)
        fail ArgumentError, "invalid value for 'template', must be one of NONE_PRIVILEGES, ALL_PRIVILEGES, INVOICING_MANAGER, PERSONELL_MANAGER, ACCOUNTANT, AUDITOR, DEPARTMENT_LEADER, MAMUT_USER_ADMIN, MAMUT_USER"
      end
      # resource path
      local_var_path = '/employee/entitlement/:grantEntitlementsByTemplate'

      # query parameters
      query_params = {}
      query_params[:'employeeId'] = employee_id
      query_params[:'template'] = template

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeentitlementApi#grant_entitlements_by_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Find all entitlements for user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :employee_id Employee ID. Defaults to ID of token owner.
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseEntitlement]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # Find all entitlements for user.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :employee_id Employee ID. Defaults to ID of token owner.
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseEntitlement, Fixnum, Hash)>] ListResponseEntitlement data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EmployeeentitlementApi.search ...'
      end
      # resource path
      local_var_path = '/employee/entitlement'

      # query parameters
      query_params = {}
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseEntitlement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmployeeentitlementApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
