=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::TravelExpenseApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TravelExpenseApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::TravelExpenseApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TravelExpenseApi' do
    it 'should create an instance of TravelExpenseApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::TravelExpenseApi)
    end
  end

  # unit tests for approve
  # [BETA] Approve travel expenses.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id ID of the elements
  # @return [ListResponseTravelExpense]
  describe 'approve test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for copy
  # [BETA] Copy travel expense.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @return [ResponseWrapperTravelExpense]
  describe 'copy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_vouchers
  # [BETA] Create vouchers
  # 
  # @param date yyyy-MM-dd. Defaults to today.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id ID of the elements
  # @return [ListResponseTravelExpense]
  describe 'create_vouchers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # [BETA] Delete travel expense.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_attachment
  # [BETA] Delete attachment.
  # 
  # @param travel_expense_id ID of attachment containing the attachment to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :version Version of voucher containing the attachment to delete.
  # @option opts [BOOLEAN] :send_to_inbox Should the attachment be sent to inbox rather than deleted?
  # @option opts [BOOLEAN] :split If sendToInbox is true, should the attachment be split into one voucher per page?
  # @return [nil]
  describe 'delete_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deliver
  # [BETA] Deliver travel expenses.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id ID of the elements
  # @return [ListResponseTravelExpense]
  describe 'deliver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_attachment
  # Get attachment by travel expense ID.
  # 
  # @param travel_expense_id Travel Expense ID from which PDF is downloaded.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'download_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # [BETA] Get travel expense by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperTravelExpense]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post
  # [BETA] Create travel expense.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [TravelExpense] :body JSON representing the new object to be created. Should not have ID and version set.
  # @return [ResponseWrapperTravelExpense]
  describe 'post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for put
  # [BETA] Update travel expense.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [TravelExpense] :body Partial object describing what should be updated
  # @return [ResponseWrapperTravelExpense]
  describe 'put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # [BETA] Find travel expenses corresponding with sent data.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :employee_id Equals
  # @option opts [String] :department_id Equals
  # @option opts [String] :project_id Equals
  # @option opts [String] :project_manager_id Equals
  # @option opts [String] :departure_date_from From and including
  # @option opts [String] :return_date_to To and excluding
  # @option opts [String] :state category
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseTravelExpense]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unapprove
  # [BETA] Unapprove travel expenses.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id ID of the elements
  # @return [ListResponseTravelExpense]
  describe 'unapprove test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for undeliver
  # [BETA] Undeliver travel expenses.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id ID of the elements
  # @return [ListResponseTravelExpense]
  describe 'undeliver test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_attachment
  # Upload attachment to travel expense.
  # 
  # @param travel_expense_id Travel Expense ID to upload attachment to.
  # @param file The file
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment
  # @return [nil]
  describe 'upload_attachment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_attachments
  # Upload multiple attachments to travel expense.
  # 
  # @param travel_expense_id Travel Expense ID to upload attachment to.
  # @param body Multipart files
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :create_new_cost Create new cost row when you add the attachment
  # @return [nil]
  describe 'upload_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
