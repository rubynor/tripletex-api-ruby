=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class LedgerpaymentTypeOutApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Delete payment type for outgoing payments by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete payment type for outgoing payments by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerpaymentTypeOutApi.delete"
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get payment type for outgoing payments by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperPaymentTypeOut]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get payment type for outgoing payments by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperPaymentTypeOut, Fixnum, Hash)>] ResponseWrapperPaymentTypeOut data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerpaymentTypeOutApi.get"
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create new payment type for outgoing payments
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTypeOut] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [ResponseWrapperPaymentTypeOut]
    def post(opts = {})
      data, _status_code, _headers = post_with_http_info(opts)
      data
    end

    # [BETA] Create new payment type for outgoing payments
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTypeOut] :body JSON representing the new object to be created. Should not have ID and version set.
    # @return [Array<(ResponseWrapperPaymentTypeOut, Fixnum, Hash)>] ResponseWrapperPaymentTypeOut data, response status code and response headers
    def post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.post ...'
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Create multiple payment types for outgoing payments at once
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentTypeOut>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [ListResponsePaymentTypeOut]
    def post_list(opts = {})
      data, _status_code, _headers = post_list_with_http_info(opts)
      data
    end

    # [BETA] Create multiple payment types for outgoing payments at once
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentTypeOut>] :body JSON representing a list of new object to be created. Should not have ID and version set.
    # @return [Array<(ListResponsePaymentTypeOut, Fixnum, Hash)>] ListResponsePaymentTypeOut data, response status code and response headers
    def post_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.post_list ...'
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#post_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update existing payment type for outgoing payments
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTypeOut] :body Partial object describing what should be updated
    # @return [ResponseWrapperPaymentTypeOut]
    def put(id, opts = {})
      data, _status_code, _headers = put_with_http_info(id, opts)
      data
    end

    # [BETA] Update existing payment type for outgoing payments
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [PaymentTypeOut] :body Partial object describing what should be updated
    # @return [Array<(ResponseWrapperPaymentTypeOut, Fixnum, Hash)>] ResponseWrapperPaymentTypeOut data, response status code and response headers
    def put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LedgerpaymentTypeOutApi.put"
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Update multiple payment types for outgoing payments at once
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentTypeOut>] :body JSON representing updates to object. Should have ID and version set.
    # @return [ListResponsePaymentTypeOut]
    def put_list(opts = {})
      data, _status_code, _headers = put_list_with_http_info(opts)
      data
    end

    # [BETA] Update multiple payment types for outgoing payments at once
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PaymentTypeOut>] :body JSON representing updates to object. Should have ID and version set.
    # @return [Array<(ListResponsePaymentTypeOut, Fixnum, Hash)>] ListResponsePaymentTypeOut data, response status code and response headers
    def put_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.put_list ...'
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#put_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Gets payment types for outgoing payments
    # This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :description Containing
    # @option opts [BOOLEAN] :is_inactive Equals
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponsePaymentTypeOut]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Gets payment types for outgoing payments
    # This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section &#39;Outgoing Payments&#39; under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :description Containing
    # @option opts [BOOLEAN] :is_inactive Equals
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponsePaymentTypeOut, Fixnum, Hash)>] ListResponsePaymentTypeOut data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LedgerpaymentTypeOutApi.search ...'
      end
      # resource path
      local_var_path = '/ledger/paymentTypeOut'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'isInactive'] = opts[:'is_inactive'] if !opts[:'is_inactive'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePaymentTypeOut')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LedgerpaymentTypeOutApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
