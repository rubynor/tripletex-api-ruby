=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class BankAgreementCreationDTO
    # Bank ID
    attr_accessor :bank_id

    # Customer number in bank
    attr_accessor :account_in_bank_id

    # Customer Id from Bank
    attr_accessor :ccm_agreement_id

    # Division (DNB only)
    attr_accessor :division

    # Organization number
    attr_accessor :organization_number

    # Electronic agreement creation initiated.
    attr_accessor :electronic_creation

    # Accounting approve payments
    attr_accessor :approve_in_online_banking

    # JSON representing a list of new object to be created. Should not have ID and version set.
    attr_accessor :bank_accounts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bank_id' => :'bankId',
        :'account_in_bank_id' => :'accountInBankId',
        :'ccm_agreement_id' => :'ccmAgreementId',
        :'division' => :'division',
        :'organization_number' => :'organizationNumber',
        :'electronic_creation' => :'electronicCreation',
        :'approve_in_online_banking' => :'approveInOnlineBanking',
        :'bank_accounts' => :'bankAccounts'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'bank_id' => :'Integer',
        :'account_in_bank_id' => :'String',
        :'ccm_agreement_id' => :'String',
        :'division' => :'String',
        :'organization_number' => :'String',
        :'electronic_creation' => :'BOOLEAN',
        :'approve_in_online_banking' => :'BOOLEAN',
        :'bank_accounts' => :'Array<Account>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'bankId')
        self.bank_id = attributes[:'bankId']
      end

      if attributes.has_key?(:'accountInBankId')
        self.account_in_bank_id = attributes[:'accountInBankId']
      end

      if attributes.has_key?(:'ccmAgreementId')
        self.ccm_agreement_id = attributes[:'ccmAgreementId']
      end

      if attributes.has_key?(:'division')
        self.division = attributes[:'division']
      end

      if attributes.has_key?(:'organizationNumber')
        self.organization_number = attributes[:'organizationNumber']
      end

      if attributes.has_key?(:'electronicCreation')
        self.electronic_creation = attributes[:'electronicCreation']
      end

      if attributes.has_key?(:'approveInOnlineBanking')
        self.approve_in_online_banking = attributes[:'approveInOnlineBanking']
      end

      if attributes.has_key?(:'bankAccounts')
        if (value = attributes[:'bankAccounts']).is_a?(Array)
          self.bank_accounts = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @bank_id.nil?
        invalid_properties.push('invalid value for "bank_id", bank_id cannot be nil.')
      end

      if @bank_accounts.nil?
        invalid_properties.push('invalid value for "bank_accounts", bank_accounts cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @bank_id.nil?
      return false if @bank_accounts.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bank_id == o.bank_id &&
          account_in_bank_id == o.account_in_bank_id &&
          ccm_agreement_id == o.ccm_agreement_id &&
          division == o.division &&
          organization_number == o.organization_number &&
          electronic_creation == o.electronic_creation &&
          approve_in_online_banking == o.approve_in_online_banking &&
          bank_accounts == o.bank_accounts
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bank_id, account_in_bank_id, ccm_agreement_id, division, organization_number, electronic_creation, approve_in_online_banking, bank_accounts].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
