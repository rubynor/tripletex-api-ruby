=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class Prospect
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :name

    attr_accessor :description

    attr_accessor :created_date

    attr_accessor :customer

    attr_accessor :sales_employee

    attr_accessor :is_closed

    attr_accessor :closed_reason

    attr_accessor :closed_date

    attr_accessor :competitor

    attr_accessor :prospect_type

    # The project connected to this prospect.
    attr_accessor :project

    # The project offer connected to this prospect.
    attr_accessor :project_offer

    # The estimated start date for income on the prospect.
    attr_accessor :final_income_date

    # The estimated startup fee on this prospect.
    attr_accessor :final_initial_value

    # The estimated monthly fee on this prospect.
    attr_accessor :final_monthly_value

    # Tripletex specific.
    attr_accessor :final_additional_services_value

    # The estimated total fee on this prospect.
    attr_accessor :total_value

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'name' => :'name',
        :'description' => :'description',
        :'created_date' => :'createdDate',
        :'customer' => :'customer',
        :'sales_employee' => :'salesEmployee',
        :'is_closed' => :'isClosed',
        :'closed_reason' => :'closedReason',
        :'closed_date' => :'closedDate',
        :'competitor' => :'competitor',
        :'prospect_type' => :'prospectType',
        :'project' => :'project',
        :'project_offer' => :'projectOffer',
        :'final_income_date' => :'finalIncomeDate',
        :'final_initial_value' => :'finalInitialValue',
        :'final_monthly_value' => :'finalMonthlyValue',
        :'final_additional_services_value' => :'finalAdditionalServicesValue',
        :'total_value' => :'totalValue'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'created_date' => :'String',
        :'customer' => :'Customer',
        :'sales_employee' => :'Employee',
        :'is_closed' => :'BOOLEAN',
        :'closed_reason' => :'Integer',
        :'closed_date' => :'String',
        :'competitor' => :'String',
        :'prospect_type' => :'Integer',
        :'project' => :'Project',
        :'project_offer' => :'Project',
        :'final_income_date' => :'String',
        :'final_initial_value' => :'Float',
        :'final_monthly_value' => :'Float',
        :'final_additional_services_value' => :'Float',
        :'total_value' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'salesEmployee')
        self.sales_employee = attributes[:'salesEmployee']
      end

      if attributes.has_key?(:'isClosed')
        self.is_closed = attributes[:'isClosed']
      end

      if attributes.has_key?(:'closedReason')
        self.closed_reason = attributes[:'closedReason']
      end

      if attributes.has_key?(:'closedDate')
        self.closed_date = attributes[:'closedDate']
      end

      if attributes.has_key?(:'competitor')
        self.competitor = attributes[:'competitor']
      end

      if attributes.has_key?(:'prospectType')
        self.prospect_type = attributes[:'prospectType']
      end

      if attributes.has_key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.has_key?(:'projectOffer')
        self.project_offer = attributes[:'projectOffer']
      end

      if attributes.has_key?(:'finalIncomeDate')
        self.final_income_date = attributes[:'finalIncomeDate']
      end

      if attributes.has_key?(:'finalInitialValue')
        self.final_initial_value = attributes[:'finalInitialValue']
      end

      if attributes.has_key?(:'finalMonthlyValue')
        self.final_monthly_value = attributes[:'finalMonthlyValue']
      end

      if attributes.has_key?(:'finalAdditionalServicesValue')
        self.final_additional_services_value = attributes[:'finalAdditionalServicesValue']
      end

      if attributes.has_key?(:'totalValue')
        self.total_value = attributes[:'totalValue']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 255
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 255.')
      end

      if @created_date.nil?
        invalid_properties.push('invalid value for "created_date", created_date cannot be nil.')
      end

      if !@closed_reason.nil? && @closed_reason < 0
        invalid_properties.push('invalid value for "closed_reason", must be greater than or equal to 0.')
      end

      if !@competitor.nil? && @competitor.to_s.length > 255
        invalid_properties.push('invalid value for "competitor", the character length must be smaller than or equal to 255.')
      end

      if !@prospect_type.nil? && @prospect_type < 1
        invalid_properties.push('invalid value for "prospect_type", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 255
      return false if @created_date.nil?
      return false if !@closed_reason.nil? && @closed_reason < 0
      return false if !@competitor.nil? && @competitor.to_s.length > 255
      return false if !@prospect_type.nil? && @prospect_type < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 255
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 255.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] closed_reason Value to be assigned
    def closed_reason=(closed_reason)
      if !closed_reason.nil? && closed_reason < 0
        fail ArgumentError, 'invalid value for "closed_reason", must be greater than or equal to 0.'
      end

      @closed_reason = closed_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] competitor Value to be assigned
    def competitor=(competitor)
      if !competitor.nil? && competitor.to_s.length > 255
        fail ArgumentError, 'invalid value for "competitor", the character length must be smaller than or equal to 255.'
      end

      @competitor = competitor
    end

    # Custom attribute writer method with validation
    # @param [Object] prospect_type Value to be assigned
    def prospect_type=(prospect_type)
      if !prospect_type.nil? && prospect_type < 1
        fail ArgumentError, 'invalid value for "prospect_type", must be greater than or equal to 1.'
      end

      @prospect_type = prospect_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          name == o.name &&
          description == o.description &&
          created_date == o.created_date &&
          customer == o.customer &&
          sales_employee == o.sales_employee &&
          is_closed == o.is_closed &&
          closed_reason == o.closed_reason &&
          closed_date == o.closed_date &&
          competitor == o.competitor &&
          prospect_type == o.prospect_type &&
          project == o.project &&
          project_offer == o.project_offer &&
          final_income_date == o.final_income_date &&
          final_initial_value == o.final_initial_value &&
          final_monthly_value == o.final_monthly_value &&
          final_additional_services_value == o.final_additional_services_value &&
          total_value == o.total_value
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, name, description, created_date, customer, sales_employee, is_closed, closed_reason, closed_date, competitor, prospect_type, project, project_offer, final_income_date, final_initial_value, final_monthly_value, final_additional_services_value, total_value].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
