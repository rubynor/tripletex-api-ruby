=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class SalarypayslipApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Find payslip (PDF document) by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_type 'String' type set as default
    # @return [String]
    def download_pdf(id, opts = {})
      data, _status_code, _headers = download_pdf_with_http_info(id, opts)
      data
    end

    # [BETA] Find payslip (PDF document) by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :return_type 'String' type set as default
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def download_pdf_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalarypayslipApi.download_pdf ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SalarypayslipApi.download_pdf"
      end
      # resource path
      local_var_path = '/salary/payslip/{id}/pdf'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = {}

      # return_type
      return_type = opts[:'return_type'] || 'String'

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalarypayslipApi#download_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find payslip by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperPayslip]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Find payslip by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperPayslip, Fixnum, Hash)>] ResponseWrapperPayslip data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalarypayslipApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SalarypayslipApi.get"
      end
      # resource path
      local_var_path = '/salary/payslip/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperPayslip')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalarypayslipApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find payslips corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :employee_id List of IDs
    # @option opts [String] :wage_transaction_id List of IDs
    # @option opts [String] :activity_id List of IDs
    # @option opts [Integer] :year_from From and including
    # @option opts [Integer] :year_to To and excluding
    # @option opts [Integer] :month_from From and including
    # @option opts [Integer] :month_to To and excluding
    # @option opts [String] :voucher_date_from From and including
    # @option opts [String] :voucher_date_to To and excluding
    # @option opts [String] :comment Containing
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponsePayslip]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Find payslips corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :employee_id List of IDs
    # @option opts [String] :wage_transaction_id List of IDs
    # @option opts [String] :activity_id List of IDs
    # @option opts [Integer] :year_from From and including
    # @option opts [Integer] :year_to To and excluding
    # @option opts [Integer] :month_from From and including
    # @option opts [Integer] :month_to To and excluding
    # @option opts [String] :voucher_date_from From and including
    # @option opts [String] :voucher_date_to To and excluding
    # @option opts [String] :comment Containing
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponsePayslip, Fixnum, Hash)>] ListResponsePayslip data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SalarypayslipApi.search ...'
      end
      # resource path
      local_var_path = '/salary/payslip'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'employeeId'] = opts[:'employee_id'] if !opts[:'employee_id'].nil?
      query_params[:'wageTransactionId'] = opts[:'wage_transaction_id'] if !opts[:'wage_transaction_id'].nil?
      query_params[:'activityId'] = opts[:'activity_id'] if !opts[:'activity_id'].nil?
      query_params[:'yearFrom'] = opts[:'year_from'] if !opts[:'year_from'].nil?
      query_params[:'yearTo'] = opts[:'year_to'] if !opts[:'year_to'].nil?
      query_params[:'monthFrom'] = opts[:'month_from'] if !opts[:'month_from'].nil?
      query_params[:'monthTo'] = opts[:'month_to'] if !opts[:'month_to'].nil?
      query_params[:'voucherDateFrom'] = opts[:'voucher_date_from'] if !opts[:'voucher_date_from'].nil?
      query_params[:'voucherDateTo'] = opts[:'voucher_date_to'] if !opts[:'voucher_date_to'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponsePayslip')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SalarypayslipApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
