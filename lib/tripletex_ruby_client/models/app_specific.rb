=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class AppSpecific
    attr_accessor :hour_registration_enabled

    attr_accessor :project_enabled

    attr_accessor :department_enabled

    attr_accessor :user_is_allowed_to_register_hours

    attr_accessor :payroll_accounting_enabled

    attr_accessor :user_is_auth_wage_menu

    attr_accessor :user_is_auth_my_salary

    attr_accessor :electronic_vouchers_enabled

    attr_accessor :travel_expense_enabled

    attr_accessor :document_archive_enabled

    attr_accessor :archive_reception_enabled

    attr_accessor :user_is_payslip_only

    attr_accessor :travel_expense_rates_enabled

    attr_accessor :tax_free_mileage_rates_enabled

    attr_accessor :approve_travel_expense_enabled

    attr_accessor :user_is_auth_project_info

    attr_accessor :user_is_auth_travel_and_expense_approve

    attr_accessor :user_is_auth_employee_info

    attr_accessor :user_is_auth_voucher_approve

    attr_accessor :user_is_auth_remit_approve

    attr_accessor :user_is_auth_invoicing

    attr_accessor :user_is_auth_create_order

    attr_accessor :vat_on_for_company

    attr_accessor :tax_free_diet_rates_enabled

    attr_accessor :travel_diet_ignore_posting_enabled

    attr_accessor :employee_enabled

    attr_accessor :hour_balance_enabled_for_employee

    attr_accessor :vacation_balance_enabled_for_employee

    attr_accessor :user_is_auth_create_customer

    attr_accessor :user_is_auth_project_menu

    attr_accessor :user_is_auth_company_accounting_reports

    attr_accessor :vvselectro_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hour_registration_enabled' => :'hourRegistrationEnabled',
        :'project_enabled' => :'projectEnabled',
        :'department_enabled' => :'departmentEnabled',
        :'user_is_allowed_to_register_hours' => :'userIsAllowedToRegisterHours',
        :'payroll_accounting_enabled' => :'payrollAccountingEnabled',
        :'user_is_auth_wage_menu' => :'userIsAuthWageMenu',
        :'user_is_auth_my_salary' => :'userIsAuthMySalary',
        :'electronic_vouchers_enabled' => :'electronicVouchersEnabled',
        :'travel_expense_enabled' => :'travelExpenseEnabled',
        :'document_archive_enabled' => :'documentArchiveEnabled',
        :'archive_reception_enabled' => :'archiveReceptionEnabled',
        :'user_is_payslip_only' => :'userIsPayslipOnly',
        :'travel_expense_rates_enabled' => :'travelExpenseRatesEnabled',
        :'tax_free_mileage_rates_enabled' => :'taxFreeMileageRatesEnabled',
        :'approve_travel_expense_enabled' => :'approveTravelExpenseEnabled',
        :'user_is_auth_project_info' => :'userIsAuthProjectInfo',
        :'user_is_auth_travel_and_expense_approve' => :'userIsAuthTravelAndExpenseApprove',
        :'user_is_auth_employee_info' => :'userIsAuthEmployeeInfo',
        :'user_is_auth_voucher_approve' => :'userIsAuthVoucherApprove',
        :'user_is_auth_remit_approve' => :'userIsAuthRemitApprove',
        :'user_is_auth_invoicing' => :'userIsAuthInvoicing',
        :'user_is_auth_create_order' => :'userIsAuthCreateOrder',
        :'vat_on_for_company' => :'vatOnForCompany',
        :'tax_free_diet_rates_enabled' => :'taxFreeDietRatesEnabled',
        :'travel_diet_ignore_posting_enabled' => :'travelDietIgnorePostingEnabled',
        :'employee_enabled' => :'employeeEnabled',
        :'hour_balance_enabled_for_employee' => :'hourBalanceEnabledForEmployee',
        :'vacation_balance_enabled_for_employee' => :'vacationBalanceEnabledForEmployee',
        :'user_is_auth_create_customer' => :'userIsAuthCreateCustomer',
        :'user_is_auth_project_menu' => :'userIsAuthProjectMenu',
        :'user_is_auth_company_accounting_reports' => :'userIsAuthCompanyAccountingReports',
        :'vvselectro_enabled' => :'vvselectroEnabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'hour_registration_enabled' => :'BOOLEAN',
        :'project_enabled' => :'BOOLEAN',
        :'department_enabled' => :'BOOLEAN',
        :'user_is_allowed_to_register_hours' => :'BOOLEAN',
        :'payroll_accounting_enabled' => :'BOOLEAN',
        :'user_is_auth_wage_menu' => :'BOOLEAN',
        :'user_is_auth_my_salary' => :'BOOLEAN',
        :'electronic_vouchers_enabled' => :'BOOLEAN',
        :'travel_expense_enabled' => :'BOOLEAN',
        :'document_archive_enabled' => :'BOOLEAN',
        :'archive_reception_enabled' => :'BOOLEAN',
        :'user_is_payslip_only' => :'BOOLEAN',
        :'travel_expense_rates_enabled' => :'BOOLEAN',
        :'tax_free_mileage_rates_enabled' => :'BOOLEAN',
        :'approve_travel_expense_enabled' => :'BOOLEAN',
        :'user_is_auth_project_info' => :'BOOLEAN',
        :'user_is_auth_travel_and_expense_approve' => :'BOOLEAN',
        :'user_is_auth_employee_info' => :'BOOLEAN',
        :'user_is_auth_voucher_approve' => :'BOOLEAN',
        :'user_is_auth_remit_approve' => :'BOOLEAN',
        :'user_is_auth_invoicing' => :'BOOLEAN',
        :'user_is_auth_create_order' => :'BOOLEAN',
        :'vat_on_for_company' => :'BOOLEAN',
        :'tax_free_diet_rates_enabled' => :'BOOLEAN',
        :'travel_diet_ignore_posting_enabled' => :'BOOLEAN',
        :'employee_enabled' => :'BOOLEAN',
        :'hour_balance_enabled_for_employee' => :'BOOLEAN',
        :'vacation_balance_enabled_for_employee' => :'BOOLEAN',
        :'user_is_auth_create_customer' => :'BOOLEAN',
        :'user_is_auth_project_menu' => :'BOOLEAN',
        :'user_is_auth_company_accounting_reports' => :'BOOLEAN',
        :'vvselectro_enabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'hourRegistrationEnabled')
        self.hour_registration_enabled = attributes[:'hourRegistrationEnabled']
      end

      if attributes.has_key?(:'projectEnabled')
        self.project_enabled = attributes[:'projectEnabled']
      end

      if attributes.has_key?(:'departmentEnabled')
        self.department_enabled = attributes[:'departmentEnabled']
      end

      if attributes.has_key?(:'userIsAllowedToRegisterHours')
        self.user_is_allowed_to_register_hours = attributes[:'userIsAllowedToRegisterHours']
      end

      if attributes.has_key?(:'payrollAccountingEnabled')
        self.payroll_accounting_enabled = attributes[:'payrollAccountingEnabled']
      end

      if attributes.has_key?(:'userIsAuthWageMenu')
        self.user_is_auth_wage_menu = attributes[:'userIsAuthWageMenu']
      end

      if attributes.has_key?(:'userIsAuthMySalary')
        self.user_is_auth_my_salary = attributes[:'userIsAuthMySalary']
      end

      if attributes.has_key?(:'electronicVouchersEnabled')
        self.electronic_vouchers_enabled = attributes[:'electronicVouchersEnabled']
      end

      if attributes.has_key?(:'travelExpenseEnabled')
        self.travel_expense_enabled = attributes[:'travelExpenseEnabled']
      end

      if attributes.has_key?(:'documentArchiveEnabled')
        self.document_archive_enabled = attributes[:'documentArchiveEnabled']
      end

      if attributes.has_key?(:'archiveReceptionEnabled')
        self.archive_reception_enabled = attributes[:'archiveReceptionEnabled']
      end

      if attributes.has_key?(:'userIsPayslipOnly')
        self.user_is_payslip_only = attributes[:'userIsPayslipOnly']
      end

      if attributes.has_key?(:'travelExpenseRatesEnabled')
        self.travel_expense_rates_enabled = attributes[:'travelExpenseRatesEnabled']
      end

      if attributes.has_key?(:'taxFreeMileageRatesEnabled')
        self.tax_free_mileage_rates_enabled = attributes[:'taxFreeMileageRatesEnabled']
      end

      if attributes.has_key?(:'approveTravelExpenseEnabled')
        self.approve_travel_expense_enabled = attributes[:'approveTravelExpenseEnabled']
      end

      if attributes.has_key?(:'userIsAuthProjectInfo')
        self.user_is_auth_project_info = attributes[:'userIsAuthProjectInfo']
      end

      if attributes.has_key?(:'userIsAuthTravelAndExpenseApprove')
        self.user_is_auth_travel_and_expense_approve = attributes[:'userIsAuthTravelAndExpenseApprove']
      end

      if attributes.has_key?(:'userIsAuthEmployeeInfo')
        self.user_is_auth_employee_info = attributes[:'userIsAuthEmployeeInfo']
      end

      if attributes.has_key?(:'userIsAuthVoucherApprove')
        self.user_is_auth_voucher_approve = attributes[:'userIsAuthVoucherApprove']
      end

      if attributes.has_key?(:'userIsAuthRemitApprove')
        self.user_is_auth_remit_approve = attributes[:'userIsAuthRemitApprove']
      end

      if attributes.has_key?(:'userIsAuthInvoicing')
        self.user_is_auth_invoicing = attributes[:'userIsAuthInvoicing']
      end

      if attributes.has_key?(:'userIsAuthCreateOrder')
        self.user_is_auth_create_order = attributes[:'userIsAuthCreateOrder']
      end

      if attributes.has_key?(:'vatOnForCompany')
        self.vat_on_for_company = attributes[:'vatOnForCompany']
      end

      if attributes.has_key?(:'taxFreeDietRatesEnabled')
        self.tax_free_diet_rates_enabled = attributes[:'taxFreeDietRatesEnabled']
      end

      if attributes.has_key?(:'travelDietIgnorePostingEnabled')
        self.travel_diet_ignore_posting_enabled = attributes[:'travelDietIgnorePostingEnabled']
      end

      if attributes.has_key?(:'employeeEnabled')
        self.employee_enabled = attributes[:'employeeEnabled']
      end

      if attributes.has_key?(:'hourBalanceEnabledForEmployee')
        self.hour_balance_enabled_for_employee = attributes[:'hourBalanceEnabledForEmployee']
      end

      if attributes.has_key?(:'vacationBalanceEnabledForEmployee')
        self.vacation_balance_enabled_for_employee = attributes[:'vacationBalanceEnabledForEmployee']
      end

      if attributes.has_key?(:'userIsAuthCreateCustomer')
        self.user_is_auth_create_customer = attributes[:'userIsAuthCreateCustomer']
      end

      if attributes.has_key?(:'userIsAuthProjectMenu')
        self.user_is_auth_project_menu = attributes[:'userIsAuthProjectMenu']
      end

      if attributes.has_key?(:'userIsAuthCompanyAccountingReports')
        self.user_is_auth_company_accounting_reports = attributes[:'userIsAuthCompanyAccountingReports']
      end

      if attributes.has_key?(:'vvselectroEnabled')
        self.vvselectro_enabled = attributes[:'vvselectroEnabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hour_registration_enabled == o.hour_registration_enabled &&
          project_enabled == o.project_enabled &&
          department_enabled == o.department_enabled &&
          user_is_allowed_to_register_hours == o.user_is_allowed_to_register_hours &&
          payroll_accounting_enabled == o.payroll_accounting_enabled &&
          user_is_auth_wage_menu == o.user_is_auth_wage_menu &&
          user_is_auth_my_salary == o.user_is_auth_my_salary &&
          electronic_vouchers_enabled == o.electronic_vouchers_enabled &&
          travel_expense_enabled == o.travel_expense_enabled &&
          document_archive_enabled == o.document_archive_enabled &&
          archive_reception_enabled == o.archive_reception_enabled &&
          user_is_payslip_only == o.user_is_payslip_only &&
          travel_expense_rates_enabled == o.travel_expense_rates_enabled &&
          tax_free_mileage_rates_enabled == o.tax_free_mileage_rates_enabled &&
          approve_travel_expense_enabled == o.approve_travel_expense_enabled &&
          user_is_auth_project_info == o.user_is_auth_project_info &&
          user_is_auth_travel_and_expense_approve == o.user_is_auth_travel_and_expense_approve &&
          user_is_auth_employee_info == o.user_is_auth_employee_info &&
          user_is_auth_voucher_approve == o.user_is_auth_voucher_approve &&
          user_is_auth_remit_approve == o.user_is_auth_remit_approve &&
          user_is_auth_invoicing == o.user_is_auth_invoicing &&
          user_is_auth_create_order == o.user_is_auth_create_order &&
          vat_on_for_company == o.vat_on_for_company &&
          tax_free_diet_rates_enabled == o.tax_free_diet_rates_enabled &&
          travel_diet_ignore_posting_enabled == o.travel_diet_ignore_posting_enabled &&
          employee_enabled == o.employee_enabled &&
          hour_balance_enabled_for_employee == o.hour_balance_enabled_for_employee &&
          vacation_balance_enabled_for_employee == o.vacation_balance_enabled_for_employee &&
          user_is_auth_create_customer == o.user_is_auth_create_customer &&
          user_is_auth_project_menu == o.user_is_auth_project_menu &&
          user_is_auth_company_accounting_reports == o.user_is_auth_company_accounting_reports &&
          vvselectro_enabled == o.vvselectro_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [hour_registration_enabled, project_enabled, department_enabled, user_is_allowed_to_register_hours, payroll_accounting_enabled, user_is_auth_wage_menu, user_is_auth_my_salary, electronic_vouchers_enabled, travel_expense_enabled, document_archive_enabled, archive_reception_enabled, user_is_payslip_only, travel_expense_rates_enabled, tax_free_mileage_rates_enabled, approve_travel_expense_enabled, user_is_auth_project_info, user_is_auth_travel_and_expense_approve, user_is_auth_employee_info, user_is_auth_voucher_approve, user_is_auth_remit_approve, user_is_auth_invoicing, user_is_auth_create_order, vat_on_for_company, tax_free_diet_rates_enabled, travel_diet_ignore_posting_enabled, employee_enabled, hour_balance_enabled_for_employee, vacation_balance_enabled_for_employee, user_is_auth_create_customer, user_is_auth_project_menu, user_is_auth_company_accounting_reports, vvselectro_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
