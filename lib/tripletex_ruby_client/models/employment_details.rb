=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class EmploymentDetails
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :employment

    attr_accessor :date

    # Define the employment type.
    attr_accessor :employment_type

    # Define the employment form.
    attr_accessor :employment_form

    attr_accessor :maritime_employment

    # Define the remuneration type.
    attr_accessor :remuneration_type

    # Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours
    attr_accessor :working_hours_scheme

    attr_accessor :shift_duration_hours

    # To find the right value to enter in this field, you could go to GET /employee/employment/occupationCode to get a list of valid ID's.
    attr_accessor :occupation_code

    attr_accessor :percentage_of_full_time_equivalent

    attr_accessor :annual_salary

    attr_accessor :hourly_wage

    attr_accessor :payroll_tax_municipality_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'employment' => :'employment',
        :'date' => :'date',
        :'employment_type' => :'employmentType',
        :'employment_form' => :'employmentForm',
        :'maritime_employment' => :'maritimeEmployment',
        :'remuneration_type' => :'remunerationType',
        :'working_hours_scheme' => :'workingHoursScheme',
        :'shift_duration_hours' => :'shiftDurationHours',
        :'occupation_code' => :'occupationCode',
        :'percentage_of_full_time_equivalent' => :'percentageOfFullTimeEquivalent',
        :'annual_salary' => :'annualSalary',
        :'hourly_wage' => :'hourlyWage',
        :'payroll_tax_municipality_id' => :'payrollTaxMunicipalityId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'employment' => :'Employment',
        :'date' => :'String',
        :'employment_type' => :'String',
        :'employment_form' => :'String',
        :'maritime_employment' => :'MaritimeEmployment',
        :'remuneration_type' => :'String',
        :'working_hours_scheme' => :'String',
        :'shift_duration_hours' => :'Float',
        :'occupation_code' => :'OccupationCode',
        :'percentage_of_full_time_equivalent' => :'Float',
        :'annual_salary' => :'Float',
        :'hourly_wage' => :'Float',
        :'payroll_tax_municipality_id' => :'Municipality'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'employment')
        self.employment = attributes[:'employment']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'employmentType')
        self.employment_type = attributes[:'employmentType']
      end

      if attributes.has_key?(:'employmentForm')
        self.employment_form = attributes[:'employmentForm']
      end

      if attributes.has_key?(:'maritimeEmployment')
        self.maritime_employment = attributes[:'maritimeEmployment']
      end

      if attributes.has_key?(:'remunerationType')
        self.remuneration_type = attributes[:'remunerationType']
      end

      if attributes.has_key?(:'workingHoursScheme')
        self.working_hours_scheme = attributes[:'workingHoursScheme']
      end

      if attributes.has_key?(:'shiftDurationHours')
        self.shift_duration_hours = attributes[:'shiftDurationHours']
      end

      if attributes.has_key?(:'occupationCode')
        self.occupation_code = attributes[:'occupationCode']
      end

      if attributes.has_key?(:'percentageOfFullTimeEquivalent')
        self.percentage_of_full_time_equivalent = attributes[:'percentageOfFullTimeEquivalent']
      end

      if attributes.has_key?(:'annualSalary')
        self.annual_salary = attributes[:'annualSalary']
      end

      if attributes.has_key?(:'hourlyWage')
        self.hourly_wage = attributes[:'hourlyWage']
      end

      if attributes.has_key?(:'payrollTaxMunicipalityId')
        self.payroll_tax_municipality_id = attributes[:'payrollTaxMunicipalityId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @percentage_of_full_time_equivalent.nil?
        invalid_properties.push('invalid value for "percentage_of_full_time_equivalent", percentage_of_full_time_equivalent cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      employment_type_validator = EnumAttributeValidator.new('String', ['ORDINARY', 'MARITIME', 'FREELANCE'])
      return false unless employment_type_validator.valid?(@employment_type)
      employment_form_validator = EnumAttributeValidator.new('String', ['PERMANENT', 'TEMPORARY'])
      return false unless employment_form_validator.valid?(@employment_form)
      remuneration_type_validator = EnumAttributeValidator.new('String', ['MONTHLY_WAGE', 'HOURLY_WAGE', 'COMMISION_PERCENTAGE', 'FEE', 'PIECEWORK_WAGE'])
      return false unless remuneration_type_validator.valid?(@remuneration_type)
      working_hours_scheme_validator = EnumAttributeValidator.new('String', ['NOT_SHIFT', 'ROUND_THE_CLOCK', 'SHIFT_365', 'OFFSHORE_336', 'CONTINUOUS', 'OTHER_SHIFT'])
      return false unless working_hours_scheme_validator.valid?(@working_hours_scheme)
      return false if @percentage_of_full_time_equivalent.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_type Object to be assigned
    def employment_type=(employment_type)
      validator = EnumAttributeValidator.new('String', ['ORDINARY', 'MARITIME', 'FREELANCE'])
      unless validator.valid?(employment_type)
        fail ArgumentError, 'invalid value for "employment_type", must be one of #{validator.allowable_values}.'
      end
      @employment_type = employment_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_form Object to be assigned
    def employment_form=(employment_form)
      validator = EnumAttributeValidator.new('String', ['PERMANENT', 'TEMPORARY'])
      unless validator.valid?(employment_form)
        fail ArgumentError, 'invalid value for "employment_form", must be one of #{validator.allowable_values}.'
      end
      @employment_form = employment_form
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] remuneration_type Object to be assigned
    def remuneration_type=(remuneration_type)
      validator = EnumAttributeValidator.new('String', ['MONTHLY_WAGE', 'HOURLY_WAGE', 'COMMISION_PERCENTAGE', 'FEE', 'PIECEWORK_WAGE'])
      unless validator.valid?(remuneration_type)
        fail ArgumentError, 'invalid value for "remuneration_type", must be one of #{validator.allowable_values}.'
      end
      @remuneration_type = remuneration_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] working_hours_scheme Object to be assigned
    def working_hours_scheme=(working_hours_scheme)
      validator = EnumAttributeValidator.new('String', ['NOT_SHIFT', 'ROUND_THE_CLOCK', 'SHIFT_365', 'OFFSHORE_336', 'CONTINUOUS', 'OTHER_SHIFT'])
      unless validator.valid?(working_hours_scheme)
        fail ArgumentError, 'invalid value for "working_hours_scheme", must be one of #{validator.allowable_values}.'
      end
      @working_hours_scheme = working_hours_scheme
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          employment == o.employment &&
          date == o.date &&
          employment_type == o.employment_type &&
          employment_form == o.employment_form &&
          maritime_employment == o.maritime_employment &&
          remuneration_type == o.remuneration_type &&
          working_hours_scheme == o.working_hours_scheme &&
          shift_duration_hours == o.shift_duration_hours &&
          occupation_code == o.occupation_code &&
          percentage_of_full_time_equivalent == o.percentage_of_full_time_equivalent &&
          annual_salary == o.annual_salary &&
          hourly_wage == o.hourly_wage &&
          payroll_tax_municipality_id == o.payroll_tax_municipality_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, employment, date, employment_type, employment_form, maritime_employment, remuneration_type, working_hours_scheme, shift_duration_hours, occupation_code, percentage_of_full_time_equivalent, annual_salary, hourly_wage, payroll_tax_municipality_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
