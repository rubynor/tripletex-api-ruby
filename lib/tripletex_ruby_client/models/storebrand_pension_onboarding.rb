=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class StorebrandPensionOnboarding
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :has_active_pension_contracts

    attr_accessor :current_pension_provider

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :role

    attr_accessor :phone_number

    attr_accessor :email

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'has_active_pension_contracts' => :'hasActivePensionContracts',
        :'current_pension_provider' => :'currentPensionProvider',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'role' => :'role',
        :'phone_number' => :'phoneNumber',
        :'email' => :'email'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'has_active_pension_contracts' => :'BOOLEAN',
        :'current_pension_provider' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'role' => :'String',
        :'phone_number' => :'String',
        :'email' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'hasActivePensionContracts')
        self.has_active_pension_contracts = attributes[:'hasActivePensionContracts']
      end

      if attributes.has_key?(:'currentPensionProvider')
        self.current_pension_provider = attributes[:'currentPensionProvider']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.has_key?(:'phoneNumber')
        self.phone_number = attributes[:'phoneNumber']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @has_active_pension_contracts.nil?
        invalid_properties.push('invalid value for "has_active_pension_contracts", has_active_pension_contracts cannot be nil.')
      end

      if @current_pension_provider.nil?
        invalid_properties.push('invalid value for "current_pension_provider", current_pension_provider cannot be nil.')
      end

      if @current_pension_provider.to_s.length > 100
        invalid_properties.push('invalid value for "current_pension_provider", the character length must be smaller than or equal to 100.')
      end

      if @current_pension_provider.to_s.length < 0
        invalid_properties.push('invalid value for "current_pension_provider", the character length must be great than or equal to 0.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 100
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 100.')
      end

      if !@first_name.nil? && @first_name.to_s.length < 0
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 0.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 100
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 100.')
      end

      if !@last_name.nil? && @last_name.to_s.length < 0
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 0.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 25
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 25.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length < 0
        invalid_properties.push('invalid value for "phone_number", the character length must be great than or equal to 0.')
      end

      if !@email.nil? && @email.to_s.length > 100
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 100.')
      end

      if !@email.nil? && @email.to_s.length < 0
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @has_active_pension_contracts.nil?
      return false if @current_pension_provider.nil?
      return false if @current_pension_provider.to_s.length > 100
      return false if @current_pension_provider.to_s.length < 0
      return false if !@first_name.nil? && @first_name.to_s.length > 100
      return false if !@first_name.nil? && @first_name.to_s.length < 0
      return false if !@last_name.nil? && @last_name.to_s.length > 100
      return false if !@last_name.nil? && @last_name.to_s.length < 0
      return false if @role.nil?
      role_validator = EnumAttributeValidator.new('String', ['CEO', 'CHAIRMAN', 'INSURANCE', 'ACCOUNTANT_EXTERNAL', 'HR', 'FINANCE', 'ACCOUNTANT_INTERNAL', 'OTHER'])
      return false unless role_validator.valid?(@role)
      return false if !@phone_number.nil? && @phone_number.to_s.length > 25
      return false if !@phone_number.nil? && @phone_number.to_s.length < 0
      return false if !@email.nil? && @email.to_s.length > 100
      return false if !@email.nil? && @email.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] current_pension_provider Value to be assigned
    def current_pension_provider=(current_pension_provider)
      if current_pension_provider.nil?
        fail ArgumentError, 'current_pension_provider cannot be nil'
      end

      if current_pension_provider.to_s.length > 100
        fail ArgumentError, 'invalid value for "current_pension_provider", the character length must be smaller than or equal to 100.'
      end

      if current_pension_provider.to_s.length < 0
        fail ArgumentError, 'invalid value for "current_pension_provider", the character length must be great than or equal to 0.'
      end

      @current_pension_provider = current_pension_provider
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 100.'
      end

      if !first_name.nil? && first_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 0.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 100.'
      end

      if !last_name.nil? && last_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 0.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new('String', ['CEO', 'CHAIRMAN', 'INSURANCE', 'ACCOUNTANT_EXTERNAL', 'HR', 'FINANCE', 'ACCOUNTANT_INTERNAL', 'OTHER'])
      unless validator.valid?(role)
        fail ArgumentError, 'invalid value for "role", must be one of #{validator.allowable_values}.'
      end
      @role = role
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 25
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 25.'
      end

      if !phone_number.nil? && phone_number.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone_number", the character length must be great than or equal to 0.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 100.'
      end

      if !email.nil? && email.to_s.length < 0
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 0.'
      end

      @email = email
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          has_active_pension_contracts == o.has_active_pension_contracts &&
          current_pension_provider == o.current_pension_provider &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          role == o.role &&
          phone_number == o.phone_number &&
          email == o.email
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, has_active_pension_contracts, current_pension_provider, first_name, last_name, role, phone_number, email].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
