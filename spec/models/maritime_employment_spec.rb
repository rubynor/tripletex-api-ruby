=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for TripletexRubyClient::MaritimeEmployment
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'MaritimeEmployment' do
  before do
    # run before each test
    @instance = TripletexRubyClient::MaritimeEmployment.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MaritimeEmployment' do
    it 'should create an instance of MaritimeEmployment' do
      expect(@instance).to be_instance_of(TripletexRubyClient::MaritimeEmployment)
    end
  end
  describe 'test attribute "ship_register"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NIS", "NOR", "FOREIGN"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.ship_register = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "ship_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["OTHER", "DRILLING_PLATFORM", "TOURIST"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.ship_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "trade_area"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["DOMESTIC", "FOREIGN"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.trade_area = value }.not_to raise_error
      # end
    end
  end

end
