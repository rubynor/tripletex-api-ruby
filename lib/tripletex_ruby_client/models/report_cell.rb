=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class ReportCell
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    # Expression / formula according to Rule Engine Expression Language
    attr_accessor :expression

    # Variable name that can be used to reference this cell
    attr_accessor :variable_name

    # Format string for value (how to print number, date etc)
    attr_accessor :value_format

    # Format string for cell (indentation, font size etc)
    attr_accessor :cell_format

    # Format string for cell (indentation, font size etc)
    attr_accessor :default_axis

    # Column reference
    attr_accessor :column

    # Row reference
    attr_accessor :row

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'expression' => :'expression',
        :'variable_name' => :'variableName',
        :'value_format' => :'valueFormat',
        :'cell_format' => :'cellFormat',
        :'default_axis' => :'defaultAxis',
        :'column' => :'column',
        :'row' => :'row'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'expression' => :'String',
        :'variable_name' => :'String',
        :'value_format' => :'String',
        :'cell_format' => :'String',
        :'default_axis' => :'String',
        :'column' => :'ReportGroup',
        :'row' => :'ReportGroup'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'expression')
        self.expression = attributes[:'expression']
      end

      if attributes.has_key?(:'variableName')
        self.variable_name = attributes[:'variableName']
      end

      if attributes.has_key?(:'valueFormat')
        self.value_format = attributes[:'valueFormat']
      end

      if attributes.has_key?(:'cellFormat')
        self.cell_format = attributes[:'cellFormat']
      end

      if attributes.has_key?(:'defaultAxis')
        self.default_axis = attributes[:'defaultAxis']
      end

      if attributes.has_key?(:'column')
        self.column = attributes[:'column']
      end

      if attributes.has_key?(:'row')
        self.row = attributes[:'row']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@expression.nil? && @expression.to_s.length > 21845
        invalid_properties.push('invalid value for "expression", the character length must be smaller than or equal to 21845.')
      end

      if !@expression.nil? && @expression.to_s.length < 0
        invalid_properties.push('invalid value for "expression", the character length must be great than or equal to 0.')
      end

      if !@variable_name.nil? && @variable_name.to_s.length > 100
        invalid_properties.push('invalid value for "variable_name", the character length must be smaller than or equal to 100.')
      end

      if !@variable_name.nil? && @variable_name.to_s.length < 0
        invalid_properties.push('invalid value for "variable_name", the character length must be great than or equal to 0.')
      end

      if !@value_format.nil? && @value_format.to_s.length > 100
        invalid_properties.push('invalid value for "value_format", the character length must be smaller than or equal to 100.')
      end

      if !@value_format.nil? && @value_format.to_s.length < 0
        invalid_properties.push('invalid value for "value_format", the character length must be great than or equal to 0.')
      end

      if !@cell_format.nil? && @cell_format.to_s.length > 255
        invalid_properties.push('invalid value for "cell_format", the character length must be smaller than or equal to 255.')
      end

      if !@cell_format.nil? && @cell_format.to_s.length < 0
        invalid_properties.push('invalid value for "cell_format", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@expression.nil? && @expression.to_s.length > 21845
      return false if !@expression.nil? && @expression.to_s.length < 0
      return false if !@variable_name.nil? && @variable_name.to_s.length > 100
      return false if !@variable_name.nil? && @variable_name.to_s.length < 0
      return false if !@value_format.nil? && @value_format.to_s.length > 100
      return false if !@value_format.nil? && @value_format.to_s.length < 0
      return false if !@cell_format.nil? && @cell_format.to_s.length > 255
      return false if !@cell_format.nil? && @cell_format.to_s.length < 0
      default_axis_validator = EnumAttributeValidator.new('String', ['NONE', 'ROW', 'COL'])
      return false unless default_axis_validator.valid?(@default_axis)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] expression Value to be assigned
    def expression=(expression)
      if !expression.nil? && expression.to_s.length > 21845
        fail ArgumentError, 'invalid value for "expression", the character length must be smaller than or equal to 21845.'
      end

      if !expression.nil? && expression.to_s.length < 0
        fail ArgumentError, 'invalid value for "expression", the character length must be great than or equal to 0.'
      end

      @expression = expression
    end

    # Custom attribute writer method with validation
    # @param [Object] variable_name Value to be assigned
    def variable_name=(variable_name)
      if !variable_name.nil? && variable_name.to_s.length > 100
        fail ArgumentError, 'invalid value for "variable_name", the character length must be smaller than or equal to 100.'
      end

      if !variable_name.nil? && variable_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "variable_name", the character length must be great than or equal to 0.'
      end

      @variable_name = variable_name
    end

    # Custom attribute writer method with validation
    # @param [Object] value_format Value to be assigned
    def value_format=(value_format)
      if !value_format.nil? && value_format.to_s.length > 100
        fail ArgumentError, 'invalid value for "value_format", the character length must be smaller than or equal to 100.'
      end

      if !value_format.nil? && value_format.to_s.length < 0
        fail ArgumentError, 'invalid value for "value_format", the character length must be great than or equal to 0.'
      end

      @value_format = value_format
    end

    # Custom attribute writer method with validation
    # @param [Object] cell_format Value to be assigned
    def cell_format=(cell_format)
      if !cell_format.nil? && cell_format.to_s.length > 255
        fail ArgumentError, 'invalid value for "cell_format", the character length must be smaller than or equal to 255.'
      end

      if !cell_format.nil? && cell_format.to_s.length < 0
        fail ArgumentError, 'invalid value for "cell_format", the character length must be great than or equal to 0.'
      end

      @cell_format = cell_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_axis Object to be assigned
    def default_axis=(default_axis)
      validator = EnumAttributeValidator.new('String', ['NONE', 'ROW', 'COL'])
      unless validator.valid?(default_axis)
        fail ArgumentError, 'invalid value for "default_axis", must be one of #{validator.allowable_values}.'
      end
      @default_axis = default_axis
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          expression == o.expression &&
          variable_name == o.variable_name &&
          value_format == o.value_format &&
          cell_format == o.cell_format &&
          default_axis == o.default_axis &&
          column == o.column &&
          row == o.row
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, expression, variable_name, value_format, cell_format, default_axis, column, row].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
