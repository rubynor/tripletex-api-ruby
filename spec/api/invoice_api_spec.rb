=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'spec_helper'
require 'json'

# Unit tests for TripletexRubyClient::InvoiceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'InvoiceApi' do
  before do
    # run before each test
    @instance = TripletexRubyClient::InvoiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of InvoiceApi' do
    it 'should create an instance of InvoiceApi' do
      expect(@instance).to be_instance_of(TripletexRubyClient::InvoiceApi)
    end
  end

  # unit tests for create_credit_note
  # Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.
  # 
  # @param id Invoice id
  # @param date Credit note date
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Comment
  # @option opts [String] :credit_note_email The credit note will be sent electronically if this field is filled out
  # @return [ResponseWrapperInvoice]
  describe 'create_credit_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_reminder
  # Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.
  # 
  # @param id Element ID
  # @param type type
  # @param date yyyy-MM-dd. Defaults to today.
  # @param dispatch_type dispatchType
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :include_charge Equals
  # @option opts [BOOLEAN] :include_interest Equals
  # @option opts [String] :sms_number SMS number (must be a valid Norwegian telephone number)
  # @return [nil]
  describe 'create_reminder test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_pdf
  # Get invoice document by invoice ID.
  # 
  # @param invoice_id Invoice ID from which PDF is downloaded.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'download_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # Get invoice by ID.
  # 
  # @param id Element ID
  # @param [Hash] opts the optional parameters
  # @option opts [String] :fields Fields filter pattern
  # @return [ResponseWrapperInvoice]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for payment
  # Update invoice. The invoice is updated with payment information. The amount is in the invoiceâ€™s currency.
  # 
  # @param id Invoice id
  # @param payment_date Payment date
  # @param payment_type_id PaymentType id
  # @param paid_amount Amount paid by customer in the company currency, typically NOK.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :paid_amount_currency Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.
  # @return [ResponseWrapperInvoice]
  describe 'payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post
  # Create invoice. Related Order and OrderLines can be created first, or included as new objects inside the Invoice.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Invoice] :body JSON representing the new object to be created. Should not have ID and version set.
  # @option opts [BOOLEAN] :send_to_customer Equals
  # @option opts [Integer] :payment_type_id Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.
  # @option opts [Float] :paid_amount Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.
  # @return [ResponseWrapperInvoice]
  describe 'post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_list
  # [BETA] Create multiple invoices. Max 100 at a time.
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<Invoice>] :body JSON representing a list of new object to be created. Should not have ID and version set.
  # @option opts [BOOLEAN] :send_to_customer Equals
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseInvoice]
  describe 'post_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search
  # Find invoices corresponding with sent data. Includes charged outgoing invoices only.
  # 
  # @param invoice_date_from From and including
  # @param invoice_date_to To and excluding
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id List of IDs
  # @option opts [String] :invoice_number Equals
  # @option opts [String] :kid Equals
  # @option opts [String] :voucher_id List of IDs
  # @option opts [String] :customer_id Equals
  # @option opts [Integer] :from From index
  # @option opts [Integer] :count Number of elements to return
  # @option opts [String] :sorting Sorting pattern
  # @option opts [String] :fields Fields filter pattern
  # @return [ListResponseInvoice]
  describe 'search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for send
  # Send invoice by ID and sendType. Optionally override email recipient.
  # 
  # @param id Element ID
  # @param send_type SendType
  # @param [Hash] opts the optional parameters
  # @option opts [String] :override_email_address Will override email address if sendType &#x3D; EMAIL
  # @return [nil]
  describe 'send test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
