=begin
#Tripletex API



OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'uri'

module TripletexRubyClient
  class BankstatementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # [BETA] Delete bank statement by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete(id, opts = {})
      delete_with_http_info(id, opts)
      nil
    end

    # [BETA] Delete bank statement by ID.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankstatementApi.delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankstatementApi.delete"
      end
      # resource path
      local_var_path = '/bank/statement/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankstatementApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Get bank statement.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [ResponseWrapperBankStatement]
    def get(id, opts = {})
      data, _status_code, _headers = get_with_http_info(id, opts)
      data
    end

    # [BETA] Get bank statement.
    # 
    # @param id Element ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ResponseWrapperBankStatement, Fixnum, Hash)>] ResponseWrapperBankStatement data, response status code and response headers
    def get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankstatementApi.get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BankstatementApi.get"
      end
      # resource path
      local_var_path = '/bank/statement/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankStatement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankstatementApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Upload bank statement file.
    # 
    # @param bank_id Bank ID
    # @param account_id Account ID
    # @param from_date Format is yyyy-MM-dd (from and incl.).
    # @param to_date Format is yyyy-MM-dd (to and excl.).
    # @param file_format File format
    # @param file The bank statement file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id External ID
    # @return [ResponseWrapperBankStatement]
    def import_bank_statement(bank_id, account_id, from_date, to_date, file_format, file, opts = {})
      data, _status_code, _headers = import_bank_statement_with_http_info(bank_id, account_id, from_date, to_date, file_format, file, opts)
      data
    end

    # [BETA] Upload bank statement file.
    # 
    # @param bank_id Bank ID
    # @param account_id Account ID
    # @param from_date Format is yyyy-MM-dd (from and incl.).
    # @param to_date Format is yyyy-MM-dd (to and excl.).
    # @param file_format File format
    # @param file The bank statement file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id External ID
    # @return [Array<(ResponseWrapperBankStatement, Fixnum, Hash)>] ResponseWrapperBankStatement data, response status code and response headers
    def import_bank_statement_with_http_info(bank_id, account_id, from_date, to_date, file_format, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankstatementApi.import_bank_statement ...'
      end
      # verify the required parameter 'bank_id' is set
      if @api_client.config.client_side_validation && bank_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_id' when calling BankstatementApi.import_bank_statement"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling BankstatementApi.import_bank_statement"
      end
      # verify the required parameter 'from_date' is set
      if @api_client.config.client_side_validation && from_date.nil?
        fail ArgumentError, "Missing the required parameter 'from_date' when calling BankstatementApi.import_bank_statement"
      end
      # verify the required parameter 'to_date' is set
      if @api_client.config.client_side_validation && to_date.nil?
        fail ArgumentError, "Missing the required parameter 'to_date' when calling BankstatementApi.import_bank_statement"
      end
      # verify the required parameter 'file_format' is set
      if @api_client.config.client_side_validation && file_format.nil?
        fail ArgumentError, "Missing the required parameter 'file_format' when calling BankstatementApi.import_bank_statement"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['DNB_CSV', 'EIKA_TELEPAY', 'SPAREBANK1_TELEPAY', 'VISMA_ACCOUNT_STATEMENT', 'HANDELSBANKEN_TELEPAY', 'SPAREBANKEN_VEST_TELEPAY', 'NORDEA_CSV', 'TRANSFERWISE', 'SPAREBANKEN_SOR_TELEPAY', 'SPAREBANKEN_OST_TELEPAY', 'DANSKE_BANK_CSV', 'CULTURA_BANK_TELEPAY', 'SBANKEN_PRIVAT_CSV', 'HAUGESUND_SPAREBANK_CSV', 'VISMA_ACCOUNT_STATEMENT_PSD2', 'SBANKEN_BEDRIFT_CSV', 'LANDKREDITT_TELEPAY'].include?(file_format)
        fail ArgumentError, "invalid value for 'file_format', must be one of DNB_CSV, EIKA_TELEPAY, SPAREBANK1_TELEPAY, VISMA_ACCOUNT_STATEMENT, HANDELSBANKEN_TELEPAY, SPAREBANKEN_VEST_TELEPAY, NORDEA_CSV, TRANSFERWISE, SPAREBANKEN_SOR_TELEPAY, SPAREBANKEN_OST_TELEPAY, DANSKE_BANK_CSV, CULTURA_BANK_TELEPAY, SBANKEN_PRIVAT_CSV, HAUGESUND_SPAREBANK_CSV, VISMA_ACCOUNT_STATEMENT_PSD2, SBANKEN_BEDRIFT_CSV, LANDKREDITT_TELEPAY"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling BankstatementApi.import_bank_statement"
      end
      # resource path
      local_var_path = '/bank/statement/import'

      # query parameters
      query_params = {}
      query_params[:'bankId'] = bank_id
      query_params[:'accountId'] = account_id
      query_params[:'fromDate'] = from_date
      query_params[:'toDate'] = to_date
      query_params[:'fileFormat'] = file_format
      query_params[:'externalId'] = opts[:'external_id'] if !opts[:'external_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseWrapperBankStatement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankstatementApi#import_bank_statement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # [BETA] Find bank statement corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :account_id List of IDs
    # @option opts [String] :file_format File format
    # @option opts [Integer] :from From index (default to 0)
    # @option opts [Integer] :count Number of elements to return (default to 1000)
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [ListResponseBankStatement]
    def search(opts = {})
      data, _status_code, _headers = search_with_http_info(opts)
      data
    end

    # [BETA] Find bank statement corresponding with sent data.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id List of IDs
    # @option opts [String] :account_id List of IDs
    # @option opts [String] :file_format File format
    # @option opts [Integer] :from From index
    # @option opts [Integer] :count Number of elements to return
    # @option opts [String] :sorting Sorting pattern
    # @option opts [String] :fields Fields filter pattern
    # @return [Array<(ListResponseBankStatement, Fixnum, Hash)>] ListResponseBankStatement data, response status code and response headers
    def search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BankstatementApi.search ...'
      end
      if @api_client.config.client_side_validation && opts[:'file_format'] && !['DNB_CSV', 'EIKA_TELEPAY', 'SPAREBANK1_TELEPAY', 'VISMA_ACCOUNT_STATEMENT', 'HANDELSBANKEN_TELEPAY', 'SPAREBANKEN_VEST_TELEPAY', 'NORDEA_CSV', 'TRANSFERWISE', 'SPAREBANKEN_SOR_TELEPAY', 'SPAREBANKEN_OST_TELEPAY', 'DANSKE_BANK_CSV', 'CULTURA_BANK_TELEPAY', 'SBANKEN_PRIVAT_CSV', 'HAUGESUND_SPAREBANK_CSV', 'VISMA_ACCOUNT_STATEMENT_PSD2', 'SBANKEN_BEDRIFT_CSV', 'LANDKREDITT_TELEPAY'].include?(opts[:'file_format'])
        fail ArgumentError, 'invalid value for "file_format", must be one of DNB_CSV, EIKA_TELEPAY, SPAREBANK1_TELEPAY, VISMA_ACCOUNT_STATEMENT, HANDELSBANKEN_TELEPAY, SPAREBANKEN_VEST_TELEPAY, NORDEA_CSV, TRANSFERWISE, SPAREBANKEN_SOR_TELEPAY, SPAREBANKEN_OST_TELEPAY, DANSKE_BANK_CSV, CULTURA_BANK_TELEPAY, SBANKEN_PRIVAT_CSV, HAUGESUND_SPAREBANK_CSV, VISMA_ACCOUNT_STATEMENT_PSD2, SBANKEN_BEDRIFT_CSV, LANDKREDITT_TELEPAY'
      end
      # resource path
      local_var_path = '/bank/statement'

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'accountId'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'fileFormat'] = opts[:'file_format'] if !opts[:'file_format'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'sorting'] = opts[:'sorting'] if !opts[:'sorting'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['tokenAuthScheme']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListResponseBankStatement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BankstatementApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
