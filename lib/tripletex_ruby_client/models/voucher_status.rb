=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class VoucherStatus
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    # The voucher.
    attr_accessor :voucher

    # The type of process
    attr_accessor :type

    # Process status
    attr_accessor :status

    # Time of last update
    attr_accessor :timestamp

    # 1 or 0 predefined status message
    attr_accessor :message

    # Link to external object
    attr_accessor :external_object_url

    attr_accessor :comment

    # reference number to external object
    attr_accessor :reference_number

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'voucher' => :'voucher',
        :'type' => :'type',
        :'status' => :'status',
        :'timestamp' => :'timestamp',
        :'message' => :'message',
        :'external_object_url' => :'externalObjectUrl',
        :'comment' => :'comment',
        :'reference_number' => :'referenceNumber'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'voucher' => :'Voucher',
        :'type' => :'String',
        :'status' => :'String',
        :'timestamp' => :'String',
        :'message' => :'String',
        :'external_object_url' => :'String',
        :'comment' => :'String',
        :'reference_number' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'voucher')
        self.voucher = attributes[:'voucher']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.has_key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.has_key?(:'externalObjectUrl')
        self.external_object_url = attributes[:'externalObjectUrl']
      end

      if attributes.has_key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.has_key?(:'referenceNumber')
        self.reference_number = attributes[:'referenceNumber']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@external_object_url.nil? && @external_object_url.to_s.length > 255
        invalid_properties.push('invalid value for "external_object_url", the character length must be smaller than or equal to 255.')
      end

      if !@reference_number.nil? && @reference_number.to_s.length > 255
        invalid_properties.push('invalid value for "reference_number", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ['TRIPLETEX', 'SUPPLIERINVOICE_EXTERNAL', 'DEBT_COLLECTION'])
      return false unless type_validator.valid?(@type)
      status_validator = EnumAttributeValidator.new('String', ['WAITING', 'DONE', 'SKIPPED', 'ERROR', 'NONE', 'PROCESSING', 'RECLAIMED'])
      return false unless status_validator.valid?(@status)
      message_validator = EnumAttributeValidator.new('String', ['NONE', 'ONGOING', 'NEEDS_APPROVAL', 'WITHDRAWN', 'SETTLED'])
      return false unless message_validator.valid?(@message)
      return false if !@external_object_url.nil? && @external_object_url.to_s.length > 255
      return false if !@reference_number.nil? && @reference_number.to_s.length > 255
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['TRIPLETEX', 'SUPPLIERINVOICE_EXTERNAL', 'DEBT_COLLECTION'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['WAITING', 'DONE', 'SKIPPED', 'ERROR', 'NONE', 'PROCESSING', 'RECLAIMED'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] message Object to be assigned
    def message=(message)
      validator = EnumAttributeValidator.new('String', ['NONE', 'ONGOING', 'NEEDS_APPROVAL', 'WITHDRAWN', 'SETTLED'])
      unless validator.valid?(message)
        fail ArgumentError, 'invalid value for "message", must be one of #{validator.allowable_values}.'
      end
      @message = message
    end

    # Custom attribute writer method with validation
    # @param [Object] external_object_url Value to be assigned
    def external_object_url=(external_object_url)
      if !external_object_url.nil? && external_object_url.to_s.length > 255
        fail ArgumentError, 'invalid value for "external_object_url", the character length must be smaller than or equal to 255.'
      end

      @external_object_url = external_object_url
    end

    # Custom attribute writer method with validation
    # @param [Object] reference_number Value to be assigned
    def reference_number=(reference_number)
      if !reference_number.nil? && reference_number.to_s.length > 255
        fail ArgumentError, 'invalid value for "reference_number", the character length must be smaller than or equal to 255.'
      end

      @reference_number = reference_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          voucher == o.voucher &&
          type == o.type &&
          status == o.status &&
          timestamp == o.timestamp &&
          message == o.message &&
          external_object_url == o.external_object_url &&
          comment == o.comment &&
          reference_number == o.reference_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, voucher, type, status, timestamp, message, external_object_url, comment, reference_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
