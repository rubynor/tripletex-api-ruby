=begin
#Tripletex API

OpenAPI spec version: 2.69.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.24

=end

require 'date'

module TripletexRubyClient
  class MileageAllowance
    attr_accessor :id

    attr_accessor :version

    attr_accessor :changes

    attr_accessor :url

    attr_accessor :travel_expense

    attr_accessor :rate_type

    attr_accessor :rate_category

    attr_accessor :date

    attr_accessor :departure_location

    attr_accessor :destination

    attr_accessor :km

    attr_accessor :rate

    attr_accessor :amount

    attr_accessor :is_company_car

    # Link to individual passengers.
    attr_accessor :passengers

    # Passenger mileage allowance associated with this mileage allowance.
    attr_accessor :passenger_supplement

    # Toll cost associated with this mileage allowance.
    attr_accessor :toll_cost

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'version' => :'version',
        :'changes' => :'changes',
        :'url' => :'url',
        :'travel_expense' => :'travelExpense',
        :'rate_type' => :'rateType',
        :'rate_category' => :'rateCategory',
        :'date' => :'date',
        :'departure_location' => :'departureLocation',
        :'destination' => :'destination',
        :'km' => :'km',
        :'rate' => :'rate',
        :'amount' => :'amount',
        :'is_company_car' => :'isCompanyCar',
        :'passengers' => :'passengers',
        :'passenger_supplement' => :'passengerSupplement',
        :'toll_cost' => :'tollCost'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'version' => :'Integer',
        :'changes' => :'Array<Change>',
        :'url' => :'String',
        :'travel_expense' => :'TravelExpense',
        :'rate_type' => :'TravelExpenseRate',
        :'rate_category' => :'TravelExpenseRateCategory',
        :'date' => :'String',
        :'departure_location' => :'String',
        :'destination' => :'String',
        :'km' => :'Float',
        :'rate' => :'Float',
        :'amount' => :'Float',
        :'is_company_car' => :'BOOLEAN',
        :'passengers' => :'Array<Passenger>',
        :'passenger_supplement' => :'MileageAllowance',
        :'toll_cost' => :'Cost'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'changes')
        if (value = attributes[:'changes']).is_a?(Array)
          self.changes = value
        end
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'travelExpense')
        self.travel_expense = attributes[:'travelExpense']
      end

      if attributes.has_key?(:'rateType')
        self.rate_type = attributes[:'rateType']
      end

      if attributes.has_key?(:'rateCategory')
        self.rate_category = attributes[:'rateCategory']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'departureLocation')
        self.departure_location = attributes[:'departureLocation']
      end

      if attributes.has_key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.has_key?(:'km')
        self.km = attributes[:'km']
      end

      if attributes.has_key?(:'rate')
        self.rate = attributes[:'rate']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'isCompanyCar')
        self.is_company_car = attributes[:'isCompanyCar']
      end

      if attributes.has_key?(:'passengers')
        if (value = attributes[:'passengers']).is_a?(Array)
          self.passengers = value
        end
      end

      if attributes.has_key?(:'passengerSupplement')
        self.passenger_supplement = attributes[:'passengerSupplement']
      end

      if attributes.has_key?(:'tollCost')
        self.toll_cost = attributes[:'tollCost']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @departure_location.nil?
        invalid_properties.push('invalid value for "departure_location", departure_location cannot be nil.')
      end

      if @destination.nil?
        invalid_properties.push('invalid value for "destination", destination cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @date.nil?
      return false if @departure_location.nil?
      return false if @destination.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          version == o.version &&
          changes == o.changes &&
          url == o.url &&
          travel_expense == o.travel_expense &&
          rate_type == o.rate_type &&
          rate_category == o.rate_category &&
          date == o.date &&
          departure_location == o.departure_location &&
          destination == o.destination &&
          km == o.km &&
          rate == o.rate &&
          amount == o.amount &&
          is_company_car == o.is_company_car &&
          passengers == o.passengers &&
          passenger_supplement == o.passenger_supplement &&
          toll_cost == o.toll_cost
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, version, changes, url, travel_expense, rate_type, rate_category, date, departure_location, destination, km, rate, amount, is_company_car, passengers, passenger_supplement, toll_cost].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TripletexRubyClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
